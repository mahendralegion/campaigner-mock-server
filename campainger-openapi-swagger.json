{
  "openapi": "3.0.3",
  "servers": [
    {
      "url": "https://api.campaigner.com"
    }
  ],
  "info": {
    "version": "",
    "title": "Campaigner API",
    "termsOfService": "https://www.campaigner.com/legal/terms-conditions/",
    "contact": {
      "name": "Support",
      "email": "support@campaigner.com",
      "url": "https://campaigner.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "https://www.campaigner.com/wp-content/uploads/2020/05/campaigner-logo.svg",
      "altText": "Campaigner"
    },
    "description": "Swagger: [/swagger](/docs/swagger)\n"
  },
  "tags": [
    {
      "name": "accounts",
      "x-displayName": "Accounts",
      "description": "View and manage accounts in Campaigner\n"
    },
    {
      "name": "auth",
      "x-displayName": "Auth",
      "description": "Campaigner authentication requires an API key which you can pass in the request header as IntegrationKey\n"
    },
    {
      "name": "contacts",
      "x-displayName": "Contacts",
      "description": "View and manage contacts in Campaigner\n"
    },
    {
      "name": "category",
      "x-displayName": "Categories",
      "description": "Manage categories in Campaigner\n"
    },
    {
      "name": "email",
      "x-displayName": "Email",
      "description": "Manage and send Email message (campaign) in Campaigner\n"
    },
    {
      "name": "export",
      "x-displayName": "Export",
      "description": "Export data from Campaigner based on a variety of criteria and formats\n"
    },
    {
      "name": "field",
      "x-displayName": "Fields",
      "description": "Manage fields in Campaigner\n"
    },
    {
      "name": "form",
      "x-displayName": "Forms",
      "description": "Manage forms in Campaigner\n"
    },
    {
      "name": "list",
      "x-displayName": "Lists",
      "description": "Manage lists in Campaigner\n"
    },
    {
      "name": "mms",
      "x-displayName": "MMS",
      "description": "Manage and send MMS messages with Campaigner.\n"
    },
    {
      "name": "sms",
      "x-displayName": "SMS",
      "description": "Manage and send SMS messages with Campaigner, you need to configure your account with a SMS profile to get started\n"
    },
    {
      "name": "workflows",
      "x-displayName": "Workflows",
      "description": "View and manage workflows in Campaigner\n"
    }
  ],
  "paths": {
    "/accounts/v1/subaccount": {
      "post": {
        "operationId": "accountsv1subaccount",
        "tags": [
          "accounts"
        ],
        "summary": "Create A New Subaccount - BETA",
        "description": "Create a new subaccount under the account. You need an existing integration key that has been configured with the necessary API sys auth token in order to create a subaccount.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/account/v1/subaccount \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -d '{\n    \"companyName\": \"GBC\",\n    \"title\": \"test title\",\n    \"firstName\": \"first\",\n    \"lastname\": \"last\",\n    \"email\": \"test2@xyz.com\",\n    \"phone\": \"6135551234\",\n    \"fax\": \"6135554321\",\n    \"timeZoneId\": 901,\n    \"userName\": \"testname2\",\n    \"password\": \"testpassword\",\n    \"securityQuestionType\": \"BIRTH_CITY\",\n    \"securityQuestionAnswer\": \"Brockville\",\n    \"url\": \"http://google.ca\",\n    \"disableGuiAccess\": false,\n    \"address\": {\n        \"line1\": \"123 here street\",\n        \"line2\": \"Apr B\",\n        \"city\": \"Anytown\",\n        \"state\": \"ON\",\n        \"zip\": \"H0EH0E\",\n        \"country\": \"Canada\"\n    },\n    \"sendPasswordByEmail\": false    \n}'"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSubaccountModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Response recieved from interla provisioning system",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSubaccountResponse"
                }
              }
            }
          },
          "422": {
            "description": "You are not authorized to make API request for account id",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "response_code": {
                      "type": "integer",
                      "format": "int32",
                      "readOnly": true
                    },
                    "response_message": {
                      "type": "string"
                    },
                    "response_details": {
                      "type": "string"
                    }
                  },
                  "additionalProperties": false,
                  "example": {
                    "responseCode": 6,
                    "responseDetails": "You are not authorized to make API request for account id: 123456789",
                    "responseMessage": "Account is not setup for creating sub accounts."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/auth/v1/integration/key": {
      "post": {
        "operationId": "authv1integrationkey",
        "tags": [
          "auth"
        ],
        "summary": "Create A New Integration Key",
        "description": "Create more integration key(s) for the account. You need an existing integration key in order to create more keys.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/auth/v1/integration/key \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"description\": \"Integration key for API calls\",\n    \"isActive\": true\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntegrationKeyCreateModel"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key creation is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationKeysResponseResult"
                }
              }
            }
          },
          "400": {
            "description": "Description is more than 4000 characters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CharactersLimit"
                }
              }
            }
          },
          "401": {
            "description": "Integration Key supplied for the API call with any Campaigner account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Account is not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InactiveAccount"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_UnknownApiError"
                }
              }
            }
          }
        }
      }
    },
    "/sms/v1/send/single": {
      "post": {
        "operationId": "smsv1sendsingle",
        "tags": [
          "sms"
        ],
        "summary": "Send a single SMS",
        "description": "Send a single SMS message to a mobile phone number. The message can be up to 4000 characters long.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/sms/v1/send/single \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"mobilePhone\": \"19998887770\",\n    \"messageContent\": \"Hey, there!\",\n    \"shortenURLs\": true,\n    \"customHeaders\": [\n      {\n        \"name\": \"custom header name\",\n        \"value\": \"custom header value\"\n      }\n    ],\n    \"includeUnsubscribeMessage\": true\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "JSON object containing the details of the SMS message to send.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleSmsMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "SMS send successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleSMSMessageSendResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Account has SMS enabled but has not completed number set up\n- Mobile Phone field is empty or not present or is invalid or more than 15 characters long\n- Mobile Phone is out of account's sending region or globally blacklisted\n- Content is empty or not present or invalid or more than 4000 characters or contains invalid characters\n- Custom headers are invalid or name and/or value is not specified\n- There are more than 5 custom headers or character length for name and/or value exceeds 255\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have SMS enabled\n- SMS volume sending limit and/or account credit limit has reached\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sms/v1/campaign": {
      "post": {
        "operationId": "smsv1campaign",
        "tags": [
          "sms"
        ],
        "summary": "Create a SMS campaign",
        "description": "Create a SMS campaign and returns the id of the created SMS campaign.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/sms/v1/campaign \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"name\": \"SMS campaign name\",\n    \"isWorkflowCampaign\": false,\n    \"shortenURLs\": false,\n    \"trackAllLinkClicks\": false,\n    \"sendFrom\": \"sender 123\",\n    \"includeUnsubscribeMessage\": true,\n    \"contents\": {\n      \"contentSourceType\": \"Campaign or Custom\",\n      \"messageContent\": \"This is my SMS campaign.\",\n      \"campaignId\": 123\n    },\n    \"deliveryNotificationEmailAddresses\": [\n      \"email-1@example.com\",\n      \"email-2@example.com\"\n    ]\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "Create SMS campaign request body format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSmsCampaignModel"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create SMS campaign successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSmsCampaignModelResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Campaign name that already exists on the requested account\n- User supplies a campaign name having invalid characters\n- User supplies a blank campaign name\n- User supplies a campaign name having more than 255 characters\n- Request has invalid value, blank value or no value specified for contentSourceType\n- If the API request has contents node specified, contentSourceType set to Custom and has no messageContent node specified\n- If the API request has contents node specified, contentSourceType set to Custom and messageContent node specified with invalid value\n- If the API request has contents node specified, contentSourceType set to Custom and messageContent node specified exceeding 4000 character limit\n- If the API request has contents node specified, contentSourceType set to Custom and messageContent node specified has invalid characters\n- If the API request has contents node specified, contentSourceType set to Custom and messageContent node specified has invalid merge fields\n- If the API request has contents node specified, contentSourceType set to Campaign and has no campaignId node specified\n- If the API request has contents node specified, contentSourceType set to Campaign and campaignId node specified with blank/null value\n- If the API request has contents node specified, contentSourceType set to Campaign and campaignId node specified with invalid value (not existing SMS campaign or not a SMS campaign or does not belong to this account)\n- If the API request has contents node specified, contentSourceType set to campaign and campaignId node specified with a valid value BUT the campaign contents contain invalid value (as per existing content checks performed on the UI)\n- If the API request has contents node specified, contentSourceType set to Campaign and campaignId node specified has valid value BUT the campaign contents have invalid merge fields\n- If the API request has contents node specified, contentSourceType set to campaign and campaignId node specified with a valid value BUT the campaign contents contain invalid characters\n- The API will validate the email addresses supplied for their format, and will respond with an error in case the email address(s) supplied are not in valid format\n- API will respond with an error in case user provides more than 5 email addresses for delivery notification\n- If the value supplied for sendFrom does not exist as a valid configured value for Sender Name for the account/API space for which this SMS campaign is being created\n- If the API has a blank/null value specified for sendFrom field\n- If the API request has contents node specified without null/blank value set for it, but has no contentSourceType node specified \n- If account is not enabled with workflows feature and API has isworkflowcampaign parameter set to true\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "examples": {
                  "Campaign name already exists": {
                    "value": {
                      "response_code": 102,
                      "response_message": "SMS Campaign 1 already exists",
                      "response_details": "Another SMS campaign with SMS Campaign 1 already exists on the account. Please specify another unique value for: name"
                    }
                  },
                  "Campaign name with invalid characters": {
                    "value": {
                      "response_code": 111,
                      "response_message": "Invalid value: ^{",
                      "response_details": "Invalid name. A name must not contain any of the following values: ^{."
                    }
                  },
                  "Campaign name blank": {
                    "value": {
                      "response_code": 108,
                      "response_message": "name value cannot be blank",
                      "response_details": ""
                    }
                  },
                  "Campaign name more than 255 characters": {
                    "value": {
                      "response_code": 104,
                      "response_message": "Field: name cannot be more than 255 characters long",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "example": {
                  "response_code": 7,
                  "response_message": "Invalid integration key",
                  "response_details": ""
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have SMS enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "examples": {
                  "SMS not enabled": {
                    "value": {
                      "response_code": 16,
                      "response_message": "Invalid request. Account is not enabled with feature: SMS",
                      "response_details": ""
                    }
                  },
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 123 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  },
                  "X-Account-Id doesn't belong to account in IntegrationKey": {
                    "value": {
                      "response_code": 6,
                      "response_message": "You are not authorized to make API request for account id: 456",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "example": {
                  "response_code": 119,
                  "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                  "response_details": "Internal Error. Please retry."
                }
              }
            }
          }
        }
      }
    },
    "/sms/v1/campaign/{id}/recipients": {
      "put": {
        "operationId": "smsv1campaignid_recipients_put",
        "tags": [
          "sms"
        ],
        "summary": "Sets recipients to SMS campaign",
        "description": "All the contacts that are part of the the lists of recipients will be sent this SMS campaign.  The SMS campaign will be sent to all eligible contacts if sendToAllContacts is true.  The contacts that are part of the mailing lists in exclusionListIds will be exempted.\n",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the SMS campaign that you want to set the recipient to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X PUT \\\n  https://api.campaigner.com/sms/v1/campaign/12345/recipients \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"sendToAllContacts\": false,\n    \"listIds\": [\n      12345,\n      23456\n    ],\n    \"exclusionListIds\":[\n      34567\n    ]\n  }'"
          }
        ],
        "requestBody": {
          "description": "SMS campaign set recipients request body format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SmsCampaignSetRecipientsModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "If setting recipients to SMS campign is successful it returns No Content\n"
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- If supplied campaign doesn't belong to the account\n- If sendToAllContacts is true and listIds is also provided\n- If any mailing list id is present in both listIds and exclusionListIds\n- If any of the supplied mailing list id either in listIds or exclusionListIds doesn't belog to the account or it is static or it is not active\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "examples": {
                  "SMS Campaign is in invalid status": {
                    "value": {
                      "response_code": 126,
                      "response_message": "SMS Campaign is in Sending status and cannot be updated",
                      "response_details": "Cannot set recipients for SMS campaign."
                    }
                  },
                  "User has provided sendToAllContacts as true and listIds is also present": {
                    "value": {
                      "response_code": 50,
                      "response_message": "listIds is inappropriate.",
                      "response_details": "You can not specify listIds when sendToAllContacts is set to true"
                    }
                  },
                  "SMS Campaign id is invalid, there is no undeleted SMS campaign with the specified campaign id on the account": {
                    "value": {
                      "response_code": 109,
                      "response_message": "Invalid Id':' 12345.",
                      "response_details": "SMS Campaign Id':' 12345 does not exist on the account"
                    }
                  },
                  "Property Name Repeats within the Single Parent Object": {
                    "value": {
                      "response_code": 113,
                      "response_message": "You cannot repeat':' sendToAllContacts in the API request",
                      "response_details": ""
                    }
                  },
                  "Request is empty": {
                    "value": {
                      "response_code": 120,
                      "response_message": "Invalid request. There is nothing to update.",
                      "response_details": ""
                    }
                  },
                  "Parameter name is invalid in requst": {
                    "value": {
                      "response_code": 121,
                      "response_message": "Invalid parameter. isTest.",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "example": {
                  "response_code": 7,
                  "response_message": "Invalid integration key",
                  "response_details": ""
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have SMS enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "examples": {
                  "SMS not enabled": {
                    "value": {
                      "response_code": 16,
                      "response_message": "Invalid request. Account is not enabled with feature: SMS",
                      "response_details": ""
                    }
                  },
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 123 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  },
                  "X-Account-Id doesn't belong to account in IntegrationKey": {
                    "value": {
                      "response_code": 6,
                      "response_message": "You are not authorized to make API request for account id: 456",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse_SmsCampaign"
                },
                "example": {
                  "response_code": 119,
                  "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                  "response_details": "Internal Error. Please retry."
                }
              }
            }
          }
        }
      }
    },
    "/export/v1/contacts/sftp": {
      "post": {
        "operationId": "exportv1contactssftp",
        "tags": [
          "export"
        ],
        "summary": "Get contacts via sFTP - v1",
        "description": "Download contact and/or campaign stats for my own account as a file from a SFTP location.  The export is performed asynchronously. The response contains a reference number that can  be used to check the status of the export.",
        "deprecated": true,
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/export/v1/contacts/sftp \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"searchCriteriaXML\": \"<contactssearchcriteria><version major='3' minor='0' build='0' revision='0' /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>False</testContactsOnly><group><filter><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>ClickAnyLink</operator></action><operator>PastNDay</operator><value>7</value></filter><filter><relation>Or</relation><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>Open</operator></action><operator>PastNDay</operator><value>7</value></filter></group></contactssearchcriteria>\",\n    \"contactData\": {\n      \"staticFields\": [\n        \"firstName\",\n        \"lastName\",\n        \"email\",\n        \"mobilePhone\"\n      ],\n      \"systemFields\": [\n        \"emailStatus\",\n        \"smsStatus\"\n      ],\n      \"customFieldIds\": [\n        12956877,\n        49685777\n      ],\n      \"returnListMembership\": true,\n      \"returnCampaignData\": false\n    }\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "JSON object describing which contacts to export and what information to export about them.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportContactDataViaSftpV1Model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportContactDataViaSftpResponseResult"
                }
              }
            }
          },
          "400": {
            "description": "Model is missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_MissingField"
                }
              }
            }
          },
          "401": {
            "description": "Configuration is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_MissingConfig"
                }
              }
            }
          },
          "403": {
            "description": "Account is not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ForbiddenErrorForAccountNotActive"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_UnknownApiError"
                }
              }
            }
          }
        }
      }
    },
    "/export/v2/contacts/sftp": {
      "post": {
        "operationId": "exportv2contactssftp",
        "tags": [
          "export"
        ],
        "summary": "Get contacts via sFTP - v2",
        "description": "Download contact and/or campaign stats for my own account as a file from a SFTP location.  The export is performed asynchronously. The response contains a reference number that can  be used to check the status of the export. This is an enhanced version of the /export/v1/contacts/sftp endpoint.",
        "deprecated": true,
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/export/v2/contacts/sftp \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"searchCriteriaXML\": \"<contactssearchcriteria><version major='3' minor='0' build='0' revision='0' /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>False</testContactsOnly><group><filter><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>ClickAnyLink</operator></action><operator>PastNDay</operator><value>7</value></filter><filter><relation>Or</relation><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>Open</operator></action><operator>PastNDay</operator><value>7</value></filter></group></contactssearchcriteria>\",\n    \"contactData\": {\n      \"staticFields\": [\n        \"firstName\",\n        \"lastName\",\n        \"email\",\n        \"mobilePhone\"\n      ],\n      \"systemFields\": [\n        \"emailStatus\",\n        \"smsStatus\"\n      ],\n      \"customFieldIds\": [\n        12956877,\n        49685777\n      ],\n      \"returnListMembership\": true\n    },\n    \"campaignData\": {\n      \"deliveryStats\": true,\n      \"activityStats\": {\n        \"returnUserAgentInfo\": true,\n        \"returnDeviceType\": true,\n        \"activityEvents\": [\n          \"open\",\n          \"click\"\n        ]\n      }\n    }\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "JSON object describing which contacts to export and what information to export about them.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportContactDataViaSftpV2Model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportContactDataViaSftpResponseResult"
                }
              }
            }
          },
          "400": {
            "description": "Model is missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_MissingField"
                }
              }
            }
          },
          "401": {
            "description": "Configuration is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_MissingConfig"
                }
              }
            }
          },
          "403": {
            "description": "Account is not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ForbiddenErrorForAccountNotActive"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_UnknownApiError"
                }
              }
            }
          }
        }
      }
    },
    "/export/v3/contacts/sftp": {
      "post": {
        "operationId": "exportv3contactssftp",
        "tags": [
          "export"
        ],
        "summary": "Get contacts via sFTP - v3",
        "description": "Download contact and/or campaign stats for my own account as a file from a SFTP location.  The export is performed asynchronously. The response contains a reference number that can  be used to check the status of the export. This is an enhanced version of the /export/v2/contacts/sftp endpoint.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/export/v3/contacts/sftp \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"searchCriteriaXML\": \"<contactssearchcriteria><version major='3' minor='0' build='0' revision='0' /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>False</testContactsOnly><group><filter><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>ClickAnyLink</operator></action><operator>PastNDay</operator><value>7</value></filter><filter><relation>Or</relation><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>Open</operator></action><operator>PastNDay</operator><value>7</value></filter></group></contactssearchcriteria>\",\n    \"contactData\": {\n      \"staticFields\": [\n        \"firstName\",\n        \"lastName\",\n        \"email\",\n        \"mobilePhone\"\n      ],\n      \"systemFields\": [\n        \"createdDateUTC\",\n        \"creationMethod\"\n      ],\n      \"customFieldIds\": [\n        12956877,\n        49685777\n      ],\n      \"returnListMembership\": true\n    },\n    \"campaignData\": {\n      \"deliveryStats\": true,\n      \"activityStats\": {\n        \"returnUserAgentInfo\": true,\n        \"returnDeviceType\": true,\n        \"activityEvents\": [\n          \"open\",\n          \"click\"\n        ]\n      }\n    }\n  }'\n"
          }
        ],
        "requestBody": {
          "description": "JSON object describing which contacts to export and what information to export about them.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ExportContactDataViaSftpV3Model"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Export is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExportContactDataViaSftpResponseResult"
                }
              }
            }
          },
          "400": {
            "description": "Model is missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_MissingField"
                }
              }
            }
          },
          "401": {
            "description": "Configuration is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_MissingConfig"
                }
              }
            }
          },
          "403": {
            "description": "Account is not active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ForbiddenErrorForAccountNotActive"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_UnknownApiError"
                }
              }
            }
          }
        }
      }
    },
    "/lists/v1": {
      "get": {
        "operationId": "listsv1",
        "tags": [
          "list"
        ],
        "summary": "Get lists for account",
        "description": "Request to download information about all the groupings from an account, optionally filtered by their type as mailing list / static segment / dynamic segment or the category they belong.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Filter the groupings based on their type. if none is provided, all groupings are returned.",
            "schema": {
              "type": "string",
              "enum": [
                "MailingList",
                "StaticSegment",
                "DynamicSegment"
              ]
            }
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Filter the returned lists to items belonging to this specific category id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of lists to return per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 1000
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number of the data to return.",
            "schema": {
              "type": "integer",
              "default": 1,
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/lists/v1?type=MailingList&categoryId=1070&pageNumber=2&pageSize=10 \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \n"
          }
        ],
        "responses": {
          "200": {
            "description": "If valid input is provided then it returns data related to list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListsByTypeIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Invalid page size\n- Invalid page number\n- Invalid category Ids requested; do not exist on account\n- Invalid value for: type. Acceptable values are: MailingList, StaticSegment, DynamicSegment\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "listsv1_post",
        "tags": [
          "list"
        ],
        "summary": "Create list with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Request to create a new mailing list or static segment or dynamic segment on an account.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/lists/v1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"name\" : \"My List\",\n    \"type\" : \"MailingList\",\n    \"isTemporary\" : true,\n    \"isVisibleInForms\" : true,\n    \"searchCriteriaXML\" : \"<contactssearchcriteria><version major=\"3\" minor=\"0\" build=\"0\" revision=\"0\" /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>True</testContactsOnly><group><filter><filtertype>SearchAttributeValue</filtertype><staticattributeid>3</staticattributeid><action><type>Text</type><operator>Containing</operator><value>gmail</value></action></filter></group></contactssearchcriteria>\",\n    \"categoryIds\" : [\n\t\t9685968,\n\t\t9854947\n\t],\n    \"description\" : \"A mailing list containing all test contacts with email containing word: Gmail\"\n}'"
          }
        ],
        "requestBody": {
          "description": "JSON object to provide values for creating a new list.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateListRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "If list creation is successful it returns CreateListResult model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateListResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Grouping name that already exists on the requested account\n- User supplies a grouping name having invalid characters\n- User supplies a blank grouping name\n- User supplies a grouping name having more than 255 characters\n- User supplies a grouping description having invalid characters\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                },
                "examples": {
                  "Grouping name already exists": {
                    "value": {
                      "response_code": 102,
                      "response_message": "List already exists",
                      "response_details": "List:  Test2 already exists in your account. Please specify  a different name"
                    }
                  },
                  "Grouping name with invalid characters": {
                    "value": {
                      "response_code": 111,
                      "response_message": "Invalid value: ^{",
                      "response_details": "Invalid name. A name must not contain any of the following values: ^{"
                    }
                  },
                  "Grouping name more than 255 characters": {
                    "value": {
                      "response_code": 104,
                      "response_message": "Field: name cannot be more than 255 characters long",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                },
                "examples": {
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 123 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  },
                  "X-Account-Id doesn't belong to account in IntegrationKey": {
                    "value": {
                      "response_code": 6,
                      "response_message": "You are not authorized to make API request for account id: 456",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/lists/v1/{id}": {
      "get": {
        "operationId": "listsv1id_get",
        "tags": [
          "list"
        ],
        "summary": "Get list by id",
        "description": "Request to download information about list for respective id.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the list for which you are requesting information.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/lists/v1/12345 \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456'"
          }
        ],
        "responses": {
          "200": {
            "description": "If valid input is provided then it returns data related to list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetListByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n        \n- Invalid URL\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid URL": {
                    "value": {
                      "response_code": 124,
                      "response_message": "API URL cannot have spaces (URL encoded or otherwise) in it",
                      "response_details": "Please remove all spaces from your API URL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 1234 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If list id is invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                },
                "examples": {
                  "List id is invalid": {
                    "value": {
                      "response_code": 109,
                      "response_message": "Invalid id: 12345",
                      "response_details": "List Id: 12345 does not exist on the account"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "response_code": 119,
                  "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                  "response_details": "Internal Error. Please retry."
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "listsv1id_patch",
        "tags": [
          "list"
        ],
        "summary": "Update list with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Updates a list based on the provided body.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Id of the list/segment that user wishes to update",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which list properties to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateListRequest"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X PATCH \\\n  https://api.campaigner.com/lists/v1/12345 \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"name\" : \"My List\",\n    \"isTemporary\" : true,\n    \"isVisibleInForms\" : true,\n    \"searchCriteriaXML\" : \"<contactssearchcriteria><version major=\"3\" minor=\"0\" build=\"0\" revision=\"0\" /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>True</testContactsOnly><group><filter><filtertype>SearchAttributeValue</filtertype><staticattributeid>3</staticattributeid><action><type>Text</type><operator>Containing</operator><value>gmail</value></action></filter></group></contactssearchcriteria>\",\n    \"categoryIds\" : [\n\t\t9685968,\n\t\t9854947\n\t],\n    \"description\" : \"A mailing list containing all test contacts with email containing word: Gmail\"\n}'"
          }
        ],
        "responses": {
          "204": {
            "description": "If List updation is successful it returns No Content\n"
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Grouping name that already exists on the requested account\n- User supplies a grouping name having invalid characters\n- User supplies a blank grouping name\n- User supplies a grouping name having more than 255 characters\n- User supplies a grouping description having invalid characters\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                },
                "examples": {
                  "Grouping name already exists": {
                    "value": {
                      "response_code": 102,
                      "response_message": "List already exists",
                      "response_details": "List:  Test2 already exists in your account. Please specify  a different name"
                    }
                  },
                  "Grouping name with invalid characters": {
                    "value": {
                      "response_code": 111,
                      "response_message": "Invalid value: ^{",
                      "response_details": "Invalid name. A name must not contain any of the following values: ^{"
                    }
                  },
                  "Grouping name more than 255 characters": {
                    "value": {
                      "response_code": 104,
                      "response_message": "Field: name cannot be more than 255 characters long",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                },
                "examples": {
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 123 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  },
                  "X-Account-Id doesn't belong to account in IntegrationKey": {
                    "value": {
                      "response_code": 6,
                      "response_message": "You are not authorized to make API request for account id: 456",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "If list is not exists or not associated to account or not in  mailing list/static segment/dynamic segment on the requested account\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/fields/v1": {
      "get": {
        "operationId": "fieldsv1",
        "tags": [
          "field"
        ],
        "summary": "Get fields for account",
        "description": "Fetch information about all the fields on an account.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "includeCustomFields",
            "in": "query",
            "description": "Return Custom Field information if parameter is set to true",
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of fields to return per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50,
              "maximum": 1000
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number of the data to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/fields/v1?includeCustomFields=true&pageNumber=2&pageSize=10 \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \n"
          }
        ],
        "responses": {
          "200": {
            "description": "If fetching the list of fields is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldGetResponseResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Invalid page size\n- Invalid page number\n- Invalid value for: includeCustomFields\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid URL": {
                    "value": {
                      "response_code": 124,
                      "response_message": "API URL cannot have spaces (URL encoded or otherwise)  in it",
                      "response_details": "Please remove all spaces from your API URL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 1234 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "response_code": 119,
                  "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                  "response_details": "Internal Error. Please retry."
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "fieldsv1_post",
        "tags": [
          "field"
        ],
        "summary": "Create field with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Create a new custom field on an account.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/fields/v1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"name\": \"Address\",\n    \"dataType\": \"Text\",\n    \"defaultValue\": \"Heaven\"\n  }'"
          }
        ],
        "requestBody": {
          "description": "A JSON Object containing name, datatype, defaultValue and allowOtherValue for creating a new custom field.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FieldCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "If field creation is successful it returns FieldCreateResult model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FieldCreateResult"
                }
              }
            }
          },
          "400": {
            "description": "If specific field is not exists to associated account or deleted contact fields found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/forms/v1/signup": {
      "get": {
        "operationId": "formsv1",
        "tags": [
          "form"
        ],
        "summary": "Get Signup Form for account",
        "description": "Fetch information about all the signup forms on an account.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "categoryId",
            "in": "query",
            "description": "Return all Sign Up Forms belonging to this specific Sign Up Form category",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123456
          },
          {
            "name": "status",
            "in": "query",
            "description": "Return all Sign Up Forms that are in a specific status",
            "schema": {
              "type": "string",
              "enum": [
                "Complete",
                "Incomplete"
              ]
            },
            "example": "Incomplete"
          },
          {
            "name": "optInType",
            "in": "query",
            "description": "Return all Sign Up Forms that are of a specific opt-in type",
            "schema": {
              "type": "string",
              "enum": [
                "Single",
                "Double"
              ]
            },
            "example": "Double"
          },
          {
            "name": "language",
            "in": "query",
            "description": "Return all Sign Up Forms that are of a specific language",
            "schema": {
              "type": "string",
              "enum": [
                "English",
                "Spanish",
                "French",
                "Italian",
                "Russian",
                "Turkish",
                "German",
                "Polish",
                "Croatian"
              ]
            },
            "example": "Croatian"
          },
          {
            "name": "groupId",
            "in": "query",
            "description": "Return all Sign Up Forms belonging to a specific group or collection id",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 101
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of fields to return per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 500
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number of the data to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/forms/v1/signup?status=Complete&categoryId=4986897&optInType=Double&language=English$groupId=102 \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' "
          }
        ],
        "responses": {
          "200": {
            "description": "If fetching the list of signup forms is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignupFormGetResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Invalid page size\n- Invalid page number\n- Invalid category Id requested; do not exist on account\n- Invalid value for: status. Acceptable values are: Complete, Incomplete\n- Invalid value for: optInType. Acceptable values are: Single, Double\n- Invalid value for: language. Acceptable values are: English, Spanish, \n    French, Italian, Russian, Turkish, German, Polish, Croatian\n\n- Invalid group Id requested; do not exist on account\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid URL": {
                    "value": {
                      "response_code": 124,
                      "response_message": "API URL cannot have spaces (URL encoded or otherwise)  in it",
                      "response_details": "Please remove all spaces from your API URL"
                    }
                  },
                  "Invalid pageSize": {
                    "value": {
                      "response_code": 8,
                      "response_message": "Invalid PageSize. PageSize cannot exceed: 500",
                      "response_details": ""
                    }
                  },
                  "Invalid pageNumber": {
                    "value": {
                      "response_code": 111,
                      "response_message": "Invalid value: Page Number.",
                      "response_details": "Page Number: 100 does not exist."
                    }
                  },
                  "Invalid status": {
                    "value": {
                      "response_code": 117,
                      "response_message": "Invalid value for: status. Acceptable values are: Incomplete, Complete",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 1234 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "response_code": 119,
                  "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                  "response_details": "Internal Error. Please retry."
                }
              }
            }
          }
        }
      }
    },
    "/workflows/v1": {
      "get": {
        "operationId": "workflowsv1",
        "tags": [
          "workflows"
        ],
        "summary": "Get Workflows",
        "description": "Get workflow information about all the workflows on an account.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Return all workflows that are of a specific status.",
            "schema": {
              "type": "string",
              "enum": [
                "Incomplete",
                "Active",
                "Inactive",
                "Deactivated",
                "Test"
              ]
            },
            "example": "Incomplete"
          },
          {
            "name": "categoryId",
            "in": "query",
            "description": "Return all workflows belonging to this specific workflow category id.",
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 123456
          },
          {
            "name": "triggerType",
            "in": "query",
            "description": "Return all workflows that are of a specific trigger type.",
            "schema": {
              "type": "string",
              "enum": [
                "API",
                "Time",
                "Rules"
              ]
            },
            "example": "API"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of workflows to return per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 3000
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number of the data to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/workflows/v1?pageNumber=1&pageSize=20&triggerType=Rules&categoryId=1027&status=Incomplete \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \n"
          }
        ],
        "responses": {
          "200": {
            "description": "Results of a successful search for workflows for the account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWorkflowsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Invalid page size\n- Invalid page number\n- Invalid category Id requested; do not exist on account\n- Invalid value for: status. Acceptable values are: Incomplete, Active, Inactive, Deactivated, Test\n- Invalid value for: triggerType. Acceptable values are: API, Time, Rules\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have workflows enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/{id}": {
      "get": {
        "operationId": "contactsv1id_get",
        "tags": [
          "contacts"
        ],
        "summary": "Get Contact Details with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Gets fields information such as system fields, static fields, custom fields, and mailing lists for a specific contact from my account",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Id of the contact to retrieve.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "customFieldIds",
            "in": "query",
            "description": "Comma separated list of custom field ids (or \"all\") to retrieve for contact. 'All' will take precedence over any field ids that might be specified and will return all custom fields in the API response.",
            "schema": {
              "type": "string"
            },
            "example": "123456,789012"
          },
          {
            "name": "systemFields",
            "in": "query",
            "description": "Comma separated list of system field names (or \"all\") to retrieve for contact. 'All' will take precedence over any field names that might be specified and will return all system fields in the API response.",
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "createdDateUTC",
                "creationMethod",
                "lastModifiedDateUTC",
                "confirmationDateUTC",
                "optInURL",
                "optinIpAddress",
                "dateLastOpenedUTC",
                "dateLastClickedUTC",
                "dateLastSentToUTC",
                "dateLastUnsubscribedUTC",
                "dateLastConvertedUTC",
                "totalConversionValue",
                "totalConversions",
                "IPLastUnsubscribed",
                "lastBounceReason",
                "emailChangedDateUTC",
                "geoCity",
                "geoCountry",
                "geoRegion",
                "geoTimeZone",
                "geoZipCode",
                "dateLastClickedSMSUTC",
                "dateLastSentToSMSUTC",
                "dateLastUnsubscribedSMSUTC",
                "dateLastOpenedSMTPUTC",
                "dateLastClickedSMTPUTC",
                "dateLastSentToSMTPUTC"
              ]
            },
            "example": "createdDateUTC,optInURL"
          },
          {
            "name": "staticFields",
            "in": "query",
            "description": "Comma separated list of static field names (or \"all\") to retrieve for contact. 'All' will take precedence over any field names that might be specified and will return all static fields in the API response.",
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "firstName",
                "lastName",
                "phone",
                "mobilePhone",
                "email",
                "fax",
                "emailMessageFormat",
                "isTestContact",
                "ownerEmail",
                "ownerFirstName",
                "ownerLastName",
                "emailStatus",
                "smsStatus"
              ]
            },
            "example": "firstname,lastname"
          },
          {
            "name": "listIds",
            "in": "query",
            "description": "Comma separated list of list membership ids (or \"all\") to retrieve for contact. 'All' will take precedence over any ids that might be specified and will return a list of mailing list Ids and static segment Ids to which this contact is currently assigned to, in the API response",
            "schema": {
              "type": "string"
            },
            "example": "098766,2994783"
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/contacts/v1/9876543?systemFields=All&staticFields=All&customFieldids=All&ListIds=All \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \n\n"
          }
        ],
        "responses": {
          "200": {
            "description": "If contact is exists and get with specific fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContactDetailsByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "If specific field is not exists to associated account or deleted contact fields found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If contact is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "contactsv1id_patch",
        "tags": [
          "contacts"
        ],
        "summary": "Update contact with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Updates a contact based on the provided body.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Campaigner-assigned id of the contact whose information is being updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which contact properties to update.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactRequest"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X PATCH \\\n  https://api.campaigner.com/contacts/v1/9876543 \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n  \"resubscribeContact\": false,\n  \"triggerWorkflows\": {\n    \"triggerAllWorkflows\": false,\n    \"triggerSpecificWorkflows\": [\n      1,\n      2,\n      3\n    ]\n  },\n  \"staticFields\": {\n    \"email\": \"john@doe.com\",\n    \"firstName\": \"John\",\n    \"lastname\": \"Doe\"\n  },\n  \"customFields\": [\n    {\n    \"id\": 145322,\n    \"value\": \"Custom Field Value\"\n    }\n  ],\n  \"listMemberships\": [\n    {\n    \"listId\": 12345,\n    \"listStatus\": \"Assigned\"\n    }\n  ]\n}'\n"
          }
        ],
        "responses": {
          "204": {
            "description": "If contact updation is successful it returns No Content\n"
          },
          "400": {
            "description": "If specific field is not exists to associated account or deleted contact fields found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If contact is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/upsert": {
      "patch": {
        "operationId": "contactsv1upsert",
        "tags": [
          "contacts"
        ],
        "summary": "Upserts contact with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Add or update or revive contact on the account based on the provided body.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which contact properties to add the contact with or update the contact to.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertContactRequest"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X PATCH \\\n  https://api.campaigner.com/contacts/v1/upsert \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n  \"contactId\": 83394729903,\n  \"resubscribeContact\": false,\n  \"triggerWorkflows\": {\n    \"triggerAllWorkflows\": false,\n    \"triggerSpecificWorkflows\": [\n      1,\n      2,\n      3\n    ]\n  },\n  \"staticFields\": {\n    \"email\": \"john@doe.com\",\n    \"firstName\": \"John\",\n    \"lastname\": \"Doe\"\n  },\n  \"customFields\": [\n    {\n    \"id\": 145322,\n    \"value\": \"Custom Field Value\"\n    }\n  ],\n  \"listMemberships\": [\n    {\n    \"listId\": 12345,\n    \"listStatus\": \"Assigned\"\n    }\n  ]\n}'\n"
          }
        ],
        "responses": {
          "200": {
            "description": "If contact was found and update successful it returns OK\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContactResult"
                }
              }
            }
          },
          "201": {
            "description": "If no contact was found and new contact creation was successful it returns CREATED\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContactResult"
                }
              }
            }
          },
          "400": {
            "description": "If specific field is not exists to associated account or deleted contact fields found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If contact is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1": {
      "get": {
        "operationId": "contactsv1_getall",
        "tags": [
          "contacts"
        ],
        "summary": "Get all Contact Details with required values for an account (paginated)",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Gets fields information such as system fields, static fields, custom fields, and mailing lists for all contacts from my account.",
        "parameters": [
          {
            "name": "customFieldIds",
            "in": "query",
            "description": "Comma separated list of custom field ids (or \"all\") to retrieve for contact. 'All' will take precedence over any field ids that might be specified and will return all custom fields in the API response.",
            "schema": {
              "type": "string"
            },
            "example": "123456,789012"
          },
          {
            "name": "systemFields",
            "in": "query",
            "description": "Comma separated list of system field names (or \"all\") to retrieve for contact. 'All' will take precedence over any field names that might be specified and will return all system fields in the API response.",
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "createdDateUTC",
                "creationMethod",
                "lastModifiedDateUTC",
                "confirmationDateUTC",
                "optInURL",
                "optinIpAddress",
                "dateLastOpenedUTC",
                "dateLastClickedUTC",
                "dateLastSentToUTC",
                "dateLastUnsubscribedUTC",
                "dateLastConvertedUTC",
                "totalConversionValue",
                "totalConversions",
                "IPLastUnsubscribed",
                "lastBounceReason",
                "emailChangedDateUTC",
                "geoCity",
                "geoCountry",
                "geoRegion",
                "geoTimeZone",
                "geoZipCode",
                "dateLastClickedSMSUTC",
                "dateLastSentToSMSUTC",
                "dateLastUnsubscribedSMSUTC",
                "dateLastOpenedSMTPUTC",
                "dateLastClickedSMTPUTC",
                "dateLastSentToSMTPUTC"
              ]
            },
            "example": "createdDateUTC,optInURL"
          },
          {
            "name": "staticFields",
            "in": "query",
            "description": "Comma separated list of static field names (or \"all\") to retrieve for contact. 'All' will take precedence over any field names that might be specified and will return all static fields in the API response.",
            "schema": {
              "type": "string",
              "enum": [
                "All",
                "firstName",
                "lastName",
                "phone",
                "mobilePhone",
                "email",
                "fax",
                "emailMessageFormat",
                "isTestContact",
                "ownerEmail",
                "ownerFirstName",
                "ownerLastName",
                "emailStatus",
                "smsStatus"
              ]
            },
            "example": "firstname,lastname"
          },
          {
            "name": "listIds",
            "in": "query",
            "description": "Comma separated list of list membership ids (or \"all\") to retrieve for contact. 'All' will take precedence over any ids that might be specified and will return a list of mailing list Ids and static segment Ids to which this contact is currently assigned to, in the API response",
            "schema": {
              "type": "string"
            },
            "example": "098766,2994783"
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of lists to return per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 1000
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number of the data to return.",
            "schema": {
              "type": "integer",
              "default": 1,
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/contacts/v1?systemFields=All&staticFields=All&customFieldids=All&ListIds=All&pageNumber=2&pageSize=5 \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' "
          }
        ],
        "responses": {
          "200": {
            "description": "If contact is exists and get with specific fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllContactsResult"
                }
              }
            }
          },
          "400": {
            "description": "If specific field is not exists to associated account\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "contactsv1",
        "tags": [
          "contacts"
        ],
        "summary": "Create contact with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Creates a contact based on the provided body.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which contact properties to add to new the contact.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRequest"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/contacts/v1 \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n  \"triggerWorkflows\": {\n    \"triggerAllWorkflows\": false,\n    \"triggerSpecificWorkflows\": [\n      1,\n      2,\n      3\n    ]\n  },\n  \"staticFields\": {\n    \"email\": \"john@doe.com\",\n    \"firstName\": \"John\",\n    \"lastname\": \"Doe\"\n  },\n  \"customFields\": [\n    {\n    \"id\": 145322,\n    \"value\": \"Custom Field Value\"\n    }\n  ],\n  \"listMemberships\": [\n    {\n    \"listId\": 12345\n    }\n  ]\n}'\n"
          }
        ],
        "responses": {
          "201": {
            "description": "If contact creation is successful it returns CreateContactResult model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateContactResult"
                }
              }
            }
          },
          "400": {
            "description": "If specific field is not exists to associated account or deleted contact fields found\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If contact is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/import/data": {
      "patch": {
        "operationId": "contactsv1importdata",
        "tags": [
          "contacts"
        ],
        "summary": "Import contact data with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Import contact data based on the provided body.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X PATCH \\\n  https://api.campaigner.com/contacts/v1/import/contactdata \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n  \"resubscribeContact\": true,\n  \"triggerWorkflows\": {\n    \"triggerAllWorkflows\": false,\n    \"triggerSpecificWorkflows\": [\n      1,\n      2,\n      3\n    ]\n  },\n  \"contacts\": [\n    {\n      \"contactId\": 0,\n      \"staticFields\": {\n        \"email\": \"john@doe.com\",\n        \"firstName\": \"John\",\n        \"lastname\": \"Doe\"\n      },\n      \"customFields\": [\n        {\n          \"id\": 145322,\n          \"value\": \"Custom Field Value\"\n        }\n      ],\n      \"listMemberships\": [\n        {\n          \"listId\": 12345,\n          \"listStatus\": \"Assigned\"\n        }\n      ]\n    }\n  ]\n}'"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which contact properties to add/revive/update the contact. (array of objects to specify contacts data that will be imported)",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkImportContactsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If contact created/revived/updated successful or any api exception occurred for respective contact it returns OK\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkImportContactsResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Parameter Name is Invalid\n- Property Name Repeats within the Single Parent Object\n- Request has no request body at all\n- More than N contact objects specified in single API call\n- User sets contacts node to null or blank since this node is mandatory\n- User sets contacts node to empty array\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                },
                "examples": {
                  "Parameter Name is Invalid": {
                    "value": {
                      "response_code": 121,
                      "response_message": "Invalid parameter: isTest",
                      "response_details": ""
                    }
                  },
                  "Property Repeats within the Parent Object": {
                    "value": {
                      "response_code": 113,
                      "response_message": "You cannot repeat: resubscribeContact in the API request",
                      "response_details": ""
                    }
                  },
                  "More than N contact objects specified": {
                    "value": {
                      "response_code": 13,
                      "response_message": "Limit: 1000 for: contacts reached.",
                      "response_details": "You cannot specify more than 1000 contacts to import"
                    }
                  },
                  "User sets contacts node to empty array": {
                    "value": {
                      "response_code": 1006,
                      "response_message": "Field: contacts is an array but has no items specified.",
                      "response_details": "Please specify at least one contact record to import"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contacts/v1/delete": {
      "post": {
        "operationId": "contactsv1delete",
        "tags": [
          "contacts"
        ],
        "summary": "Delete contacts",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Delete contacts based on the provided ids.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/contacts/v1/delete \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n    \"contactIds\": [4244022275, 4244023298, -99999, 4244023299, 4244023300, 4244022275, 4244023301]\n}'"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which contacts to attempt to delete.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkDeleteContactsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "If contacts deletes successful it returns OK\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkDeleteContactsResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Parameter Name is Invalid\n- Property Name Repeats within the Single Parent Object\n- Request has no request body at all\n- More than N contact objects specified in single API call\n- User sets contacts node to null or blank since this node is mandatory\n- User sets contacts node to empty array\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_CustomFieldNotValidError"
                },
                "examples": {
                  "Parameter Name is Invalid": {
                    "value": {
                      "response_code": 121,
                      "response_message": "Invalid parameter: isTest",
                      "response_details": ""
                    }
                  },
                  "Property Repeats within the Parent Object": {
                    "value": {
                      "response_code": 113,
                      "response_message": "You cannot repeat: contactids in the API request",
                      "response_details": ""
                    }
                  },
                  "More than N contact objects specified": {
                    "value": {
                      "response_code": 13,
                      "response_message": "Limit: 1000 for: contacts reached.",
                      "response_details": "You cannot specify more than 1000 contact ids to delete"
                    }
                  },
                  "User sets contacts node to empty array": {
                    "value": {
                      "response_code": 1006,
                      "response_message": "Field: contactids is an array but has no items specified.",
                      "response_details": "Please specify at least one contact id to delete"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/email/v1/campaign": {
      "post": {
        "operationId": "emailv1campaign",
        "tags": [
          "email"
        ],
        "summary": "Create email campaign with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Creates a email campaing based on the provided body.",
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which email campaign properties to add to new the campaign.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailCampaignRequest"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/email/v1/campaign \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{    \n\t\"categoryAssignments\":[\n\t\t{\n\t\t    \"categoryId\" : 11223344,        \n\t\t},\n\t\t{\n\t\t    \"categoryId\" : 22334455,\n\t\t}             \n    ],   \n\t\"name\" : \"Erica Davis Scholarship (DEVO)\",\t\n    \"subject\":\"Dream Big: Apply for Erica Davis Memorial Scholarship!\",\n\t\"isWorkflowCampaign\" : false,\n\t\"fromName\" : \"Maple Leaf Foods\",\n\t\"fromEmailId\": 577987,\n\t\"replyEmailId\" : 767575,\n\t\"autoreplyMessageId\" : 6848484,\n\t\"trackReplies\" : false,\n\t\"preHeader\" : \"Hi [Contact.First Name], enjoy a fun family long weekend with guilt-free Natural Top Dogs™.\",\n\t\"trackAllLinkClicks\" : false,\n\t\"trackConversions\" : false,\n\t\"contents\" : {\n\t\t\"contentSourceType\" : \"Custom\",\n\t\t\"HTMLContent\" : \"Good Morning<br \\/> <br \\/> <img src=\\\"https:\\/\\/media.campaigner.com\\/media\\/47\\/475770\\/Flowers\\/8236.jpg?g=1561494805881\\\" alt=\\\"8236.jpg\\\" \\/>\",\n\t\t\"generateTextContentFromHTML\" : true\n\t}\t\n\t\"subscriptionSettings\" : {\n\t\t\"subscriptionManagementFormId\" : 63325,\n\t\t\"footerMessageId\" : 98988\n\t},\n\t\"mailingAddress\" : \"2 Gurdwara Rd, Ottawa, ON K2E 1A2\",\n\t\"signUpFormSettingsForSocialSharing\" : {\t\t\n\t\t\"signUpFormButtonText\" : \"Join Our List\",\n\t\t\"signUpFormId\" : 854985\t\t\n\t},\n\t\"viewOnlineSettings\" : {\t\t\n\t\t\"labelBefore\" : \"View this email online:\",\n\t\t\"viewOnlineLinkLabel\" : \"Here\",\n\t\t\"labelAfter\" : \".\",\n\t\t\"viewOnlinePosition\" : \"Bottom\"\n\t},\n\t\"googleAnalyticsSettings\" : {\n\t\t\"utmSource\" : \"Campaigner Email Marketing\",\n\t\t\"utmCampaign\" : \"Erica Davis Memorial Scholarship Campaign\",\n\t\t\"utmMedium\" : \"HTML\"\n\t},\n\t\"enableCustomURLParameters\" : true,\t\n\t\"customURLParametersSettings\" : {\t\t\n\t\t\t\"Q1\":\"J2 Global\",\n\t\t\t\"Q2\":\"2 Gurdwara Road\",\n\t\t\t\"Q3\":\"Ottawa\",\n\t\t\t\"Q4\":\"Ontario\",\n\t\t\t\"Q5\":\"K2E 1A2\",\n\t\t},\n\t\"enableAdobeAnalytics\" : true,\n\t\"encoding\" : \"UTF-8\",\t\n\t\"deliveryNotificationEmailAddresses\" : [\n\t\t\"a1@email.com\",\n\t\t\"a2@email.com\",\n\t\t\"a3@email.com\",\n\t\t\"a4@email.com\",\n\t\t\"a5@email.com\"\n\t]\n  }'"
          }
        ],
        "responses": {
          "201": {
            "description": "If email campaign creation is successful it returns CreateEmailCampaignResult model",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateEmailCampaignResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- If the API request has campaign name that already exists on the requested account\n- If the API request has campaign name node specified with blank/null value\n- If the API request has campaign name node specified with invalid characters\n- If the API request has campaign name node specified with more than 255 characters\n \n- If the API request has campaign subject node specified with more than 500 characters\n- If the API request has campaign subject node specified with invalid characters \n- If account is not enabled with workflows feature and API has isWorkflowCampaign \n  node set to true\n \n- If the API request has fromName node specified with more than 255 characters\n- If the API request has fromName node specified with invalid characters \n- If the API request has fromName node specified with unsupported merge fields\n- If the API request has fromEmailId node specified that belongs to account but not yet validated\n- If the API request has fromEmailId node specified that is not been configured to requested account\n- If the API request has replyEmailId node specified that belongs to account but not yet validated\n- If the API request has replyEmailId node specified that is not been configured to requested account\n- If the API request has autoReplyMessageId node specified that belongs to account but not yet 'complete'\n- If the API request has autoReplyMessageId node specified that is not been configured to requested account\n \n- If the API request has preHeader node specified with more than 500 characters\n- If the API request has preHeader node specified with invalid characters \n- If the API request has preHeader node specified with unsupported merge fields\n- If the API request has deliveryNotificationEmailAddresses node specified and anyone \n  email addresses is not in valid format\n\n- If the API request has deliveryNotificationEmailAddresses node specified and provides\n  more than 5 email addresses\n\n- If the API request has provides unacceptable value for encoding (Acceptable values - Default, \n  Western (Windows), UTF-8, Unspecified, Baltic (ISO), Baltic (Windows), Central European (ISO),\n  Central European (Windows), Cyrillic (ISO), Cyrillic (Windows), Greek (ISO), Greek (Windows), \n  Turkish (ISO), Turkish (Windows), Western (ISO), Vietnamese (Windows))\n\n- If the API request has enableAdobeAnalytics node specified but account is not configured with \n  Adobe Analytics\n\n- If the API request has customURLParametersSettings node specified but enableCustomURLParameters\n  node is missing or having false value\n\n- If the API request has customURLParametersSettings node specified and any of the key pair is blank value\n- If the API request has customURLParametersSettings node specified and any of the value pair is \n  blank/null value\n\n- If the API request has customURLParametersSettings node specified and combined length of all \n  key-value pair is more than 20000 characters\n\n- If the API request has customURLParametersSettings node specified and provides\n  more than 5 key-value pair\n\n- If the API request has trackConversions node specified but account is not enabled with \n  conversion tracking feature\n\n- If the API request has trackConversions node specified with true value but \n  trackAllLinkClicks node is missing or having false value\n\n- If the API request has contents node specified but contentSourceType is missing\n- If the API request has contents node specified but provides unacceptable value for \n  contentSourceType (Acceptable values - Template, Campaign, URL, Custom)\n\n- If the API request has contents node specified, contentSourceType set to Template \n  and has no templateId node specified or templateId node specified null value \n\n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified with invalid value\n  \n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified with a valid value but the template contents contain \n  invalid value (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified has valid value but the template contents have \n  invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified with a valid value but the template contents contain \n  invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Template\n  and templateId node specified with a valid value but the template contents are \n  more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and has no campaignId node specified\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and has campaignId node specified null value \n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified with invalid value\n  \n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified with a valid value but the campaign contents contain \n  invalid value (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified has valid value but the campaign contents have \n  invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified with a valid value but the campaign contents contain \n  invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Campaign\n  and campaignId node specified with a valid value but the campaign contents are \n  more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified with contents containing invalid value \n  (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified having contents with invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified with contents containing invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified are more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified with contents containing invalid value \n  (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified having contents with invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified with contents containing invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified are more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified along with generateTextContentFromHTML specified with true\n\n- If the API request has subscriptionSettings node specified and \n  subscriptionManagementFormId node specified with invalid id\n\n- If the API request has subscriptionSettings node specified and footerMessageId \n  node specified with invalid id\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has \n  signUpFormButtonText and/or signUpFormId node missing\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has \n  signUpFormButtonText and/or signUpFormId node(s) set to blank or null value\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has\n  signUpFormButtonText node specified with invalid characters\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has\n  signUpFormButtonText node specified with more than 255 characters\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has \n  signUpFormId node specified with invalid id\n\n- If the API request has enableGoogleAnalytics node specified, and has utmSource node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmSource node \n  set with invalid characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmCampaign node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmCampaign node \n  set with invalid characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmContent node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmContent node \n  set with invalid characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmMedium node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmMedium node \n  set with invalid characters\n\n- If the API request has enableViewOnline node specified, and has labelBefore node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableViewOnline node specified, and has labelBefore node \n  set with invalid characters\n\n- If the API request has enableViewOnline node specified, and has viewOnlineLinkLabel node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableViewOnline node specified, and has viewOnlineLinkLabel node \n  set with invalid characters\n\n- If the API request has enableViewOnline node specified but provides unacceptable value for \n  viewOnlinePosition (Acceptable values - Bottom, Top)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Campaign name already exists": {
                    "value": {
                      "response_code": 102,
                      "response_message": "Email Campaign 1 already exists",
                      "response_details": "Another email campaign with Email Campaign 1 already exists  on the account. Please specify another unique value for: name"
                    }
                  },
                  "Campaign name with invalid characters": {
                    "value": {
                      "response_code": 111,
                      "response_message": "Invalid value: ^{",
                      "response_details": "Invalid name. A name must not contain any of the following  values: ^{."
                    }
                  },
                  "Campaign name blank": {
                    "value": {
                      "response_code": 108,
                      "response_message": "name value cannot be blank",
                      "response_details": ""
                    }
                  },
                  "Campaign name more than 255 characters": {
                    "value": {
                      "response_code": 104,
                      "response_message": "Field: name cannot be more than 255 characters long",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If contact is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/email/v1/campaign/{id}": {
      "patch": {
        "operationId": "emailv1campaignid_patch",
        "tags": [
          "email"
        ],
        "summary": "Update email campaign with required values",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "description": "Updates a email campaing based on the provided body.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The Campaigner-assigned id of the email campaign whose information is being updated.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "requestBody": {
          "description": "Json object for specifying which email campaign properties to add to new the campaign.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailCampaignRequest"
              }
            }
          }
        },
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X POST \\\n  https://api.campaigner.com/email/v1/campaign/9876543 \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{    \n\t\"categoryAssignments\":[\n\t\t{\n\t\t    \"categoryId\" : 11223344,\n\t\t\t\"categoryAssignmentStatus\": \"NotAssigned\"\n\t\t},\n\t\t{\n\t\t    \"categoryId\" : 22334455,\n\t\t\t\"categoryAssignmentStatus\": \"Assigned\"\n\t\t}             \n    ],   \n\t\"name\" : \"Erica Davis Scholarship (DEVO)\",\t\n    \"subject\":\"Dream Big: Apply for Erica Davis Memorial Scholarship!\",\n\t\"isWorkflowCampaign\" : false,\n\t\"fromName\" : \"Maple Leaf Foods\",\n\t\"fromEmailId\": 577987,\n\t\"replyEmailId\" : 767575,\n\t\"autoreplyMessageId\" : 6848484,\n\t\"trackReplies\" : false,\n\t\"preHeader\" : \"Hi [Contact.First Name], enjoy a fun family long weekend with guilt-free Natural Top Dogs™.\",\n\t\"trackAllLinkClicks\" : false,\n\t\"trackConversions\" : false,\n\t\"contents\" : {\n\t\t\"contentSourceType\" : \"Custom\",\n\t\t\"HTMLContent\" : \"Good Morning<br \\/> <br \\/> <img src=\\\"https:\\/\\/media.campaigner.com\\/media\\/47\\/475770\\/Flowers\\/8236.jpg?g=1561494805881\\\" alt=\\\"8236.jpg\\\" \\/>\",\n\t\t\"generateTextContentFromHTML\" : true\n\t}\t\n\t\"subscriptionSettings\" : {\n\t\t\"subscriptionManagementFormId\" : 63325,\n\t\t\"footerMessageId\" : 98988\n\t},\n\t\"mailingAddress\" : \"2 Gurdwara Rd, Ottawa, ON K2E 1A2\",\n\t\"signUpFormSettingsForSocialSharing\" : {\t\t\n\t\t\"signUpFormButtonText\" : \"Join Our List\",\n\t\t\"signUpFormId\" : 854985\t\t\n\t},\n\t\"viewOnlineSettings\" : {\t\t\n\t\t\"labelBefore\" : \"View this email online:\",\n\t\t\"viewOnlineLinkLabel\" : \"Here\",\n\t\t\"labelAfter\" : \".\",\n\t\t\"viewOnlinePosition\" : \"Bottom\"\n\t},\n\t\"googleAnalyticsSettings\" : {\n\t\t\"utmSource\" : \"Campaigner Email Marketing\",\n\t\t\"utmCampaign\" : \"Erica Davis Memorial Scholarship Campaign\",\n\t\t\"utmMedium\" : \"HTML\"\n\t},\n\t\"enableCustomURLParameters\" : true,\t\n\t\"customURLParametersSettings\" : {\t\t\n\t\t\t\"Q1\":\"J2 Global\",\n\t\t\t\"Q2\":\"2 Gurdwara Road\",\n\t\t\t\"Q3\":\"Ottawa\",\n\t\t\t\"Q4\":\"Ontario\",\n\t\t\t\"Q5\":\"K2E 1A2\",\n\t\t},\n\t\"enableAdobeAnalytics\" : true,\n\t\"encoding\" : \"UTF-8\",\t\n\t\"deliveryNotificationEmailAddresses\" : [\n\t\t\"a1@email.com\",\n\t\t\"a2@email.com\",\n\t\t\"a3@email.com\",\n\t\t\"a4@email.com\",\n\t\t\"a5@email.com\"\n\t]\n  }'"
          }
        ],
        "responses": {
          "204": {
            "description": "If Email campign updation is successful it returns No Content\n"
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- If the API request has campaign name that already exists on the requested account\n- If the API request has campaign name node specified with blank/null value\n- If the API request has campaign name node specified with invalid characters\n- If the API request has campaign name node specified with more than 255 characters\n \n- If the API request has campaign subject node specified with more than 500 characters\n- If the API request has campaign subject node specified with invalid characters \n- If account is not enabled with workflows feature and API has isWorkflowCampaign \n  node set to true\n \n- If the API request has fromName node specified with more than 255 characters\n- If the API request has fromName node specified with invalid characters \n- If the API request has fromName node specified with unsupported merge fields\n- If the API request has fromEmailId node specified that belongs to account but not yet validated\n- If the API request has fromEmailId node specified that is not been configured to requested account\n- If the API request has replyEmailId node specified that belongs to account but not yet validated\n- If the API request has replyEmailId node specified that is not been configured to requested account\n- If the API request has autoReplyMessageId node specified that belongs to account but not yet 'complete'\n- If the API request has autoReplyMessageId node specified that is not been configured to requested account\n \n- If the API request has preHeader node specified with more than 500 characters\n- If the API request has preHeader node specified with invalid characters \n- If the API request has preHeader node specified with unsupported merge fields\n- If the API request has deliveryNotificationEmailAddresses node specified with empty array\n- If the API request has deliveryNotificationEmailAddresses node specified and anyone \n  email addresses is not in valid format\n\n- If the API request has deliveryNotificationEmailAddresses node specified and provides\n  more than 5 email addresses\n\n- If the API request has provides unacceptable value for encoding (Acceptable values - Default, \n  Western (Windows), UTF-8, Unspecified, Baltic (ISO), Baltic (Windows), Central European (ISO),\n  Central European (Windows), Cyrillic (ISO), Cyrillic (Windows), Greek (ISO), Greek (Windows), \n  Turkish (ISO), Turkish (Windows), Western (ISO), Vietnamese (Windows))\n\n- If the API request has enableAdobeAnalytics node specified but account is not configured with \n  Adobe Analytics\n\n- If the API request has customURLParametersSettings node specified but enableCustomURLParameters\n  node is missing or having false value\n\n- If the API request has customURLParametersSettings node specified and any of the key pair is blank value\n- If the API request has customURLParametersSettings node specified and any of the value pair is \n  blank/null value\n\n- If the API request has customURLParametersSettings node specified and combined length of all \n  key-value pair is more than 20000 characters\n\n- If the API request has customURLParametersSettings node specified and provides\n  more than 5 key-value pair\n\n- If the API request has trackConversions node specified but account is not enabled with \n  conversion tracking feature\n\n- If the API request has trackConversions node specified with true value but \n  trackAllLinkClicks node is missing or having false value\n\n- If the API request has contents node specified but contentSourceType is missing\n- If the API request has contents node specified but provides unacceptable value for \n  contentSourceType (Acceptable values - Template, Campaign, URL, Custom)\n\n- If the API request has contents node specified, contentSourceType set to Template \n  and has no templateId node specified or templateId node specified null value \n\n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified with invalid value\n  \n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified with a valid value but the template contents contain \n  invalid value (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified has valid value but the template contents have \n  invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Template \n  and templateId node specified with a valid value but the template contents contain \n  invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Template\n  and templateId node specified with a valid value but the template contents are \n  more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and has no campaignId node specified\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and has campaignId node specified null value \n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified with invalid value\n  \n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified with a valid value but the campaign contents contain \n  invalid value (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified has valid value but the campaign contents have \n  invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Campaign \n  and campaignId node specified with a valid value but the campaign contents contain \n  invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Campaign\n  and campaignId node specified with a valid value but the campaign contents are \n  more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified with contents containing invalid value \n  (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified having contents with invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified with contents containing invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and HTMLContent node specified are more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified with contents containing invalid value \n  (as per existing content checks performed on the UI)\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified having contents with invalid merge fields\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified with contents containing invalid characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified are more than 4000 characters\n\n- If the API request has contents node specified, contentSourceType set to Custom \n  and textContent node specified along with generateTextContentFromHTML specified with true\n\n- If the API request has subscriptionSettings node specified and \n  subscriptionManagementFormId node specified with invalid id\n\n- If the API request has subscriptionSettings node specified and footerMessageId \n  node specified with invalid id\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has \n  signUpFormButtonText and/or signUpFormId node missing\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has \n  signUpFormButtonText and/or signUpFormId node(s) set to blank or null value\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has\n  signUpFormButtonText node specified with invalid characters\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has\n  signUpFormButtonText node specified with more than 255 characters\n\n- If the API request has signUpFormSettingsForSocialSharing node specified and has \n  signUpFormId node specified with invalid id\n\n- If the API request has enableGoogleAnalytics node specified, and has utmSource node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmSource node \n  set with invalid characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmCampaign node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmCampaign node \n  set with invalid characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmContent node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmContent node \n  set with invalid characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmMedium node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableGoogleAnalytics node specified, and has utmMedium node \n  set with invalid characters\n\n- If the API request has enableViewOnline node specified, and has labelBefore node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableViewOnline node specified, and has labelBefore node \n  set with invalid characters\n\n- If the API request has enableViewOnline node specified, and has viewOnlineLinkLabel node \n  set with a value that contains more than 50 characters\n\n- If the API request has enableViewOnline node specified, and has viewOnlineLinkLabel node \n  set with invalid characters\n\n- If the API request has enableViewOnline node specified but provides unacceptable value for \n  viewOnlinePosition (Acceptable values - Bottom, Top)\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Campaign name already exists": {
                    "value": {
                      "response_code": 102,
                      "response_message": "Email Campaign 1 already exists",
                      "response_details": "Another email campaign with Email Campaign 1 already exists  on the account. Please specify another unique value for: name"
                    }
                  },
                  "Campaign name with invalid characters": {
                    "value": {
                      "response_code": 111,
                      "response_message": "Invalid value: ^{",
                      "response_details": "Invalid name. A name must not contain any of the following  values: ^{."
                    }
                  },
                  "Campaign name blank": {
                    "value": {
                      "response_code": 108,
                      "response_message": "name value cannot be blank",
                      "response_details": ""
                    }
                  },
                  "Campaign name more than 255 characters": {
                    "value": {
                      "response_code": 104,
                      "response_message": "Field: name cannot be more than 255 characters long",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If contact is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/email/v1/campaign/{id}/recipients": {
      "put": {
        "operationId": "emailv1campaignidrecipients_put",
        "tags": [
          "email"
        ],
        "summary": "Set recipients to Email campaign",
        "description": "All the contacts that are part of the the lists of recipients will be sent this Email campaign.  The Email campaign will be sent to all eligible contacts if sendToAllContacts is true.  The contacts that are part of the mailing lists in exclusionListIds will be exempted.\n",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The id of the Email campaign that you want to set the recipient to.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X PUT \\\n  https://api.campaigner.com/email/v1/campaign/12345/recipients \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n       \"sendToAllContacts\": false,\n       \"listIds\": [\n         12345,\n         23456\n       ],\n       \"exclusionListIds\":[\n         75674,\n         89844\n       ],\n       \"suppressionListIds\":[\n         31314,\n         63463\n       ]\n     }'"
          }
        ],
        "requestBody": {
          "description": "Email campaign set recipients request body format.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EmailCampaignSetRecipientsModel"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "If setting recipients to Email campign is successful it returns No Content\n"
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- If the API request with email campaign status is invalid\n- If the API request has not specified neither sendToAllContacts nor listIds\n- If the API request has sendToAllContacts is true and listIds is also provided\n- If the API request has list id(s) specified are invalid\n- If the API request has same mailing list or dynamic segment id is specified multiple times as a recipient in listIds node\n- If the API request has same mailing list or dynamic segment id is specified in listIds node as well as in an exclusion list by exclusionListIds node\n- If the API request has exclusion list id(s) specified are invalid\n- If the API request has same mailing list or dynamic segment id is specified multiple times as an exclusion list\n- If the API request has suppression list id(s) specified are invalid\n- If the API request has same suppression list id is specified multiple times as an suppression list\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Campaign invalid status": {
                    "value": {
                      "response_code": 126,
                      "response_message": "Email Campaign is in scheduled and cannot be updated",
                      "response_details": "Cannot set recipients for email campaign."
                    }
                  },
                  "Missing Parameter": {
                    "value": {
                      "response_code": 107,
                      "response_message": "Invalid request. You need to specify sendToAllContacts or listIds",
                      "response_details": "Email campaign has no recipients to set"
                    }
                  },
                  "Parameter is inappropriate": {
                    "value": {
                      "response_code": 50,
                      "response_message": "listIds is inappropriate.",
                      "response_details": "You can not specify listIds when sendToAllContacts is set to true"
                    }
                  },
                  "Recipient's List id is invalid": {
                    "value": {
                      "response_code": 109,
                      "response_message": "Invalid id: 24343",
                      "response_details": "There is no mailing list or dynamic segment with that id on the account"
                    }
                  },
                  "Recipient's List ids specified multiple times": {
                    "value": {
                      "response_code": 119,
                      "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                      "response_details": "'You cannot specify same list id: 43434 as a recipient and as an exclusion list for this email campaign'            "
                    }
                  },
                  "Property Name Repeats within the Single Parent Object": {
                    "value": {
                      "response_code": 113,
                      "response_message": "You cannot repeat: sendToAllContacts in the API request",
                      "response_details": ""
                    }
                  },
                  "Request is empty": {
                    "value": {
                      "response_code": 120,
                      "response_message": "Invalid request. There is nothing to update.",
                      "response_details": ""
                    }
                  },
                  "Parameter name is invalid in requst": {
                    "value": {
                      "response_code": 121,
                      "response_message": "Invalid parameter: isTest",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "If Integration Key supplied for the API call with any Campaigner account.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_InvalidIntegrationKey"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Account does not have a feature enabled\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_FeatureDisabled"
                }
              }
            }
          },
          "404": {
            "description": "If email campaign is not exists to associated account",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiError_ContactNotInAccountError"
                },
                "examples": {
                  "Campaign id is invalid": {
                    "value": {
                      "response_code": 109,
                      "response_message": "Invalid id: 12345",
                      "response_details": "Email Campaign Id: 12345 does not exist on the account"
                    }
                  },
                  "Campaign cannot be set with recipients": {
                    "value": {
                      "response_code": 109,
                      "response_message": "Invalid id: 123456",
                      "response_details": "Email Campaign Id: 123456 does not exist on the account or cannot be set with recipients"
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/categories/v1": {
      "get": {
        "operationId": "categoriesv1",
        "tags": [
          "category"
        ],
        "summary": "Get categories for account",
        "description": "Fetch information about all the categories on an account.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "To get information about a specific type of category only, specify the type here.",
            "schema": {
              "type": "string",
              "enum": [
                "Email_Campaign",
                "Mailing_List",
                "Segments",
                "Suppression_List",
                "Experiment",
                "SignUp_Form",
                "Subscription_Form",
                "ForwardtoFriend_Form",
                "Workflow",
                "Autoresponder_Triggered",
                "Autoresponder_Recurring",
                "LandingPage"
              ]
            },
            "example": "Suppression_List"
          },
          {
            "name": "parentCategoryId",
            "in": "query",
            "description": "To get information about the categories directly under a specific parent category only, specify the parent category`s id here.",
            "schema": {
              "type": "integer"
            },
            "example": 123456
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "The number of categories to return per page.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 10,
              "maximum": 10000
            }
          },
          {
            "name": "pageNumber",
            "in": "query",
            "description": "The page number of the data to return.",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "curl -X GET \\\n  https://api.campaigner.com/categories/v1?type=Email_Campaign&parentCategoryId=7474744 \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456'"
          }
        ],
        "responses": {
          "200": {
            "description": "If fetching the list of categories is successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCategoryResult"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Invalid page size\n- Invalid page number\n- Invalid value for: type\n- Invalid value for: parentCategoryId\n- Invalid value for: parentCategoryId is of a different type than the specified type\n- Invalid value for: both parentCategoryId and type not supplied\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid URL": {
                    "value": {
                      "response_code": 124,
                      "response_message": "API URL cannot have spaces (URL encoded or otherwise)  in it",
                      "response_details": "Please remove all spaces from your API URL"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "examples": {
                  "Account not active": {
                    "value": {
                      "response_code": 2,
                      "response_message": "Account id: 1234 is not active",
                      "response_details": ""
                    }
                  },
                  "Invalid integration key": {
                    "value": {
                      "response_code": 7,
                      "response_message": "Invalid integration key",
                      "response_details": ""
                    }
                  }
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                },
                "example": {
                  "response_code": 119,
                  "response_message": "Cannot execute requested operation. Please refer to response_details for more information.",
                  "response_details": "Internal Error. Please retry."
                }
              }
            }
          }
        }
      }
    },
    "/mms/v1/send/single": {
      "post": {
        "operationId": "mmsv1sendsingle",
        "tags": [
          "mms"
        ],
        "summary": "Send a single MMS",
        "description": "Send a single MMS message to a mobile phone number. The message can contain text content not more than 1600 characters and up to 10 items for media content.",
        "security": [
          {
            "IntegrationKey": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/XAccountId"
          }
        ],
        "x-codeSamples": [
          {
            "lang": "curl",
            "source": "﻿curl -X POST \\\n  https://api.campaigner.com/mms/v1/send/single \\\n  -H 'Content-Type: application/json' \\\n  -H 'IntegrationKey: YOUR_API_KEY_HERE' \\\n  -H 'X-Account-Id: 123456' \\\n  -d '{\n\t\"mobilePhone\": \"+16136136133\",\n\t\"messageContent\": {\n\t\t\"textContent\": {\n\t\t\t\"textMessage\": \"Good Morning, ńice to meet you.\"\n\t\t},\n\t\t\"mediaContents\": [\n\t\t\t{\n\t\t\t\t\"mediaName\": \"Company Logo\",\n\t\t\t\t\"mediaType\": \"image/jpeg\",\n\t\t\t\t\"mediaURL\": \"https://mycompany/media/companylogo.jpeg\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"mediaName\": \"Legal Notice Image\",\n\t\t\t\t\"mediaType\": \"image/jpeg\",\n\t\t\t\t\"mediaURL\": \"https://mycompany/media/legalnotice.jpeg\"\n\t\t\t}\n\t\t]\n\t},\n\t\"shortenURLs\": false,\n\t\"includeUnsubscribeMessage\": true,\n\t\"includeBrandedMessageHeader\": false,\n\t\"customHeaders\": [\n\t\t{\n\t\t\t\"name\": \"Message JBX Id\",\n\t\t\t\"Value\": \"4AAQSkZJRg5Sxd3KKKAP\"\n\t\t},\n\t\t{\n\t\t\t\"name\": \"Message PBX Id\",\n\t\t\t\"value\": \"DQoNCiAtIFBCIFN0YWdpbmcgRW52aX\"\n\t\t}\n\t]\n}'"
          }
        ],
        "requestBody": {
          "description": "JSON object containing the details of the MMS message to send.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SingleMmsMessageRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "MMS send successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleMMSMessageSendResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request due to several potential reasons:\n- Account has MMS enabled but has not completed number set up\n- Mobile Phone field is empty or not present or is invalid or more than 15 characters long\n- Mobile Phone is out of account's sending region or globally blacklisted\n- Custom headers are invalid or name and/or value is not specified\n- There are more than 5 custom headers or character length for name and/or value exceeds 255\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Invalid integration key",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Unauthorized due to several potential reasons:\n- Account is inactive\n- Integration key is invalid or inactive\n- Subaccount is inactive or is not under the master account with integration key\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too many requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorRateLimitExceeded"
                }
              }
            }
          },
          "500": {
            "description": "Internal error while processing the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "IntegrationKey": {
        "type": "apiKey",
        "name": "IntegrationKey",
        "in": "header"
      }
    },
    "schemas": {
      "CreateSubaccountModel": {
        "type": "object",
        "properties": {
          "companyName": {
            "type": "string",
            "nullable": true,
            "description": "The sub-account's business name.",
            "example": "Company Name"
          },
          "title": {
            "type": "string",
            "nullable": true,
            "description": "The sub-account holder’s title.",
            "example": "Dr"
          },
          "firstName": {
            "type": "string",
            "nullable": false,
            "description": "The sub-account holder’s first name.",
            "example": "First Name"
          },
          "lastName": {
            "type": "string",
            "nullable": false,
            "description": "The sub-account holder’s last name.",
            "example": "Last Name"
          },
          "email": {
            "type": "string",
            "nullable": false,
            "description": "The sub-account holder’s email address.",
            "example": "tester@xyz.com"
          },
          "phone": {
            "type": "string",
            "nullable": false,
            "description": "The sub-account holder’s phone number.",
            "example": "123-456-7890"
          },
          "fax": {
            "type": "string",
            "nullable": true,
            "description": "The sub-account holder’s fax number.",
            "example": "123-456-7899"
          },
          "userName": {
            "type": "string",
            "nullable": true,
            "description": "Specify a sign-in name for the sub-account holder. This is the username that the sub-account holder will use to identify themselves when logging into the product.",
            "example": "tester"
          },
          "password": {
            "type": "string",
            "nullable": true,
            "description": "Specify a password for the sub-account holder.  The sub-account holder can use this password to initially log into the product and will be able to change it at any time thereafter. \nIf you’d rather the sub-account holder set their own initial password, set the sendPasswordByEmail parameter to true in your request and a welcome email containing a \npassword setup link will be sent to the sub-account holder’s email address.\n",
            "example": "password"
          },
          "securityQuestionType": {
            "type": "string",
            "nullable": true,
            "description": "Specify the type of security question that can be used for identification purposes during communication with Customer Support.",
            "default": "NONE",
            "enum": [
              "NONE",
              "BIRTH_CITY",
              "MOTHER_MAIDEN_NAME",
              "PET_NAME",
              "FAVORITE_FOOD",
              "FAVORITE_SPORT"
            ],
            "example": "BIRTH_CITY"
          },
          "securityQuestionAnswer": {
            "type": "string",
            "nullable": true,
            "description": "Specify the answer to the security question type selected in the securityQuestionType parameter.",
            "example": "New York"
          },
          "url": {
            "type": "string",
            "nullable": true,
            "description": "The sub-account holder’s website URL.",
            "example": "http://www.xyz.com"
          },
          "disableGuiAccess": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Set to true if you don’t want the sub-account holder to be able to log into the product.",
            "example": false
          },
          "sendPasswordByEmail": {
            "type": "boolean",
            "nullable": true,
            "default": false,
            "description": "Set to true if you want a welcome email to be sent to the sub-account holder’s email address once the sub-account is created.\nThe welcome email will contain a password setup link that the sub-account holder can use to get access to the product.\n",
            "example": false
          },
          "address": {
            "type": "object",
            "nullable": false,
            "description": "The sub-account holder’s business or personal mailing address.",
            "properties": {
              "line1": {
                "type": "string",
                "nullable": true,
                "description": "The first line of the address.",
                "example": "123 Main St"
              },
              "line2": {
                "type": "string",
                "nullable": true,
                "description": "The second line of the address.",
                "example": "Suite 100"
              },
              "city": {
                "type": "string",
                "nullable": true,
                "description": "The city of the address.",
                "example": "New York"
              },
              "state": {
                "type": "string",
                "nullable": true,
                "description": "The state of the address.",
                "example": "NY"
              },
              "country": {
                "type": "string",
                "nullable": false,
                "description": "The country of the address.",
                "example": "USA"
              }
            }
          },
          "timeZoneId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the sub-account holder’s time zone. Time zone id must be one the following:\n| id | time zone |\n|----|-----------|\n| 401 | Alaskan Standard Time |\n| 1602 | Arab Standard Time |\n| 1701 | Arabian Standard Time |\n| 1601 | Arabic Standard Time |\n| 1605 | Arabic Standard Time |\n| 901 | Atlantic Standard Time |\n| 2301 | AUS Eastern Standard Time |\n| 2302 | AUS Eastern Standard Time |\n| 2304 | AUS Eastern Standard Time |\n| 1201 | Azores Standard Time |\n| 704 | Canada Central Standard Time |\n| 1202 | Cape Verde Standard Time |\n| 1702 | Caucasus Standard Time |\n| 1703 | Caucasus Standard Time |\n| 701 | Central America Standard Time |\n| 1402 | Central Europe Standard Time |\n| 1404 | Central European Standard Time |\n| 702 | Central Standard Time |\n| 2101 | China Standard Time |\n| 101 | Dateline Standard Time |\n| 1604 | E. Africa Standard Time |\n| 1501 | E. Europe Standard Time |\n| 1502 | E. Europe Standard Time |\n| 1503 | E. Europe Standard Time |\n| 1505 | E. Europe Standard Time |\n| 1002 | E. South America Standard Time |\n| 802 | Eastern Standard Time |\n| 9999 | Eastern Standard Time |\n| 10000 | Eastern Standard Time |\n| 1504 | Egypt Standard Time |\n| 1801 | Ekaterinburg Standard Time |\n| 2502 | Fiji Islands Standard Time |\n| 1506 | FLE Standard Time |\n| 1302 | GMT Standard Time |\n| 1004 | Greenland Standard Time |\n| 1301 | Greenwich Standard Time |\n| 1508 | GTB Standard Time |\n| 301 | Hawaiian Standard Time |\n| 1507 | Israel Standard Time |\n| 2202| Korea Standard Time |\n| 703 | Mexico Standard Time |\n| 602 | Mexico Standard Time 2 | \n| 1101 | Mid|Atlantic Standard Time |\n| 603 | Mountain Standard Time |\n| 1901 | N. Central Asia Standard Time |\n| 2501 | New Zealand Standard Time |\n| 2102 | North Asia East Standard Time |\n| 2002 | North Asia Standard Time |\n| 904 | Pacific SA Standard Time |\n| 501 | Pacific Standard Time |\n| 502 | Pacific Standard Time |\n| 1403 | Romance Standard Time |\n| 1603 | Russian Standard Time |\n| 1003 | SA Eastern Standard Time |\n| 1005 | SA Eastern Standard Time |\n| 801 | SA Pacific Standard Time |\n| 902 | SA Western Standard Time |\n| 903 | SA Western Standard Time |\n| 201 | Samoa Standard Time |\n| 2401 | Samoa Standard Time |\n| 2001 | SE Asia Standard Time |\n| 2103 | Singapore Standard Time |\n| 1509 | South Africa Standard Time |\n| 1902 | Sri Lanka Standard Time |\n| 2105 | Taipei Standard Time |\n| 2201 | Tokyo Standard Time |\n| 2601 | Tonga Standard Time |\n| 803 | US Eastern Standard Time |\n| 601 | US Mountain Standard Time |\n| 2305 | Vladivostok Standard Time |\n| 2104 | W. Australia Standard Time |\n| 1405 | W. Central Africa Standard Time |\n| 1401 | W. Europe Standard Time |\n| 1802 | West Asia Standard Time |\n| 2303 | West Pacific Standard Time |\n| 2203 | Yakutsk Standard Time |\n",
            "example": 901,
            "default": 901
          }
        }
      },
      "CreateSubaccountResponse": {
        "type": "object",
        "properties": {
          "errorFlag": {
            "type": "boolean",
            "nullable": false,
            "description": "Returns true if the sub-account creation failed, otherwise returns false.",
            "example": false
          },
          "returnCode": {
            "type": "string",
            "nullable": false,
            "description": "Returns a code that indicates the result of the request.",
            "example": "M_1.1.1_SUCCESS"
          },
          "returnMessage": {
            "type": "string",
            "nullable": false,
            "description": "Returns details about the result of the request.",
            "example": "Success."
          },
          "subAccountId": {
            "type": "integer",
            "nullable": false,
            "description": "Returns the newly-created sub-account’s id when the request is successful, otherwise returns -1.",
            "example": 456123
          }
        }
      },
      "IntegrationKeyCreateModel": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "Describe the key for your reference.",
            "maximum": 4000,
            "example": "A new key for the account"
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the key is active or not",
            "default": true
          }
        },
        "additionalProperties": false
      },
      "IntegrationKeysResponseResult": {
        "type": "object",
        "properties": {
          "integrationKey": {
            "description": "Value of the new integration key created for the requested account. This will be the plain text value of the integration key .",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "integrationKey": "123456789"
        }
      },
      "ApiError_CharactersLimit": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 104,
          "responseDetails": null,
          "responseMessage": "Field: description cannot be more than 4000 characters long"
        }
      },
      "ApiError_InvalidIntegrationKey": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 7,
          "responseDetails": null,
          "responseMessage": "Invalid integration key."
        }
      },
      "ApiError_InactiveAccount": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 2,
          "responseDetails": null,
          "responseMessage": "Account id: {0} is not active"
        }
      },
      "ApiErrorRateLimitExceeded": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "response_code": 1,
          "response_message": "API rate limit exceeded",
          "response_details": "Maximum API calls allowed: 10 per 1 second(s). Please try again in 9 second(s)."
        }
      },
      "ApiError_UnknownApiError": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 1009,
          "responseDetails": null,
          "responseMessage": "An error occurred while processing your request."
        }
      },
      "CustomHeader": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gets or sets the Name field.",
            "example": "custom header name"
          },
          "value": {
            "type": "string",
            "description": "Gets or sets the Value field.",
            "example": "custom header value"
          }
        },
        "additionalProperties": false,
        "required": [
          "name",
          "value"
        ],
        "description": "Class for CustomHeader"
      },
      "SingleSmsMessageRequest": {
        "required": [
          "messageContent",
          "mobilePhone"
        ],
        "type": "object",
        "properties": {
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone number to send",
            "example": "19998887770",
            "maximum": 15
          },
          "messageContent": {
            "type": "string",
            "description": "Message to send",
            "example": "Hey, there!",
            "maximum": 4000
          },
          "shortenURLs": {
            "type": "boolean",
            "description": "Whether to shorten the urls in message content or not",
            "example": true,
            "default": false
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomHeader"
            },
            "description": "List of custom headers",
            "maxItems": 5
          },
          "includeUnsubscribeMessage": {
            "type": "boolean",
            "description": "Whether to include unsubscribe message at the end of the content",
            "example": true,
            "default": true
          },
          "includeBrandedMessageHeader": {
            "type": "boolean",
            "description": "Whether to include branded message header at the beginning of the content. If the node is not present, then value set in account settings will be used to determine whether to include branded message header at the beginning of the content.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Class for SingleSms message request"
      },
      "SingleSMSMessageSendResponse": {
        "type": "object",
        "properties": {
          "mobilePhone": {
            "type": "string",
            "description": "Gets or sets the MobilePhone.",
            "example": "19998887770"
          },
          "smsmessageId": {
            "type": "string",
            "description": "Gets or sets the SMSMessageId (GUID).",
            "example": "cf9e5a91-b445-4acc-8a19-479d6812e6b8"
          }
        },
        "additionalProperties": false,
        "description": "Response model for SingleSms Message send."
      },
      "ApiErrorResponse": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateSmsCampaignModelContents": {
        "type": "object",
        "description": "Contents of this campaign.",
        "required": [
          "contentSourceType"
        ],
        "properties": {
          "contentSourceType": {
            "type": "string",
            "nullable": false,
            "description": "Content source type to use for this campaign. ",
            "enum": [
              "Campaign",
              "Custom"
            ],
            "example": "Campaign"
          },
          "messageContent": {
            "type": "string",
            "nullable": false,
            "description": "Message content to use for the campaign when contentSourceType is Custom.",
            "maximum": 4000,
            "example": "Hey, there!"
          },
          "campaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": false,
            "description": "Id of the SMS campaign whose content is to be used when contentSourceType is Campaign.",
            "example": 123456
          }
        }
      },
      "CreateSmsCampaignModel": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": false,
            "description": "Name for the SMS campaign. Campaigner will assign a unique campaign name \n(following same business logic as in CSB UI) if one has not given any campaign name in the API request.\n",
            "example": "SMS Campaign 1",
            "maximum": 255
          },
          "isWorkflowCampaign": {
            "type": "boolean",
            "nullable": false,
            "description": "Flag indicating whether this campaign is to be associated with a workflow.",
            "default": false
          },
          "shortenURLs": {
            "type": "boolean",
            "nullable": false,
            "description": "Flag indicating whether to shorten URLs in the content.",
            "default": false
          },
          "trackAllLinkClicks": {
            "type": "boolean",
            "nullable": false,
            "description": "Flag indicating whether to track the links in the campaign.",
            "default": false
          },
          "sendFrom": {
            "type": "string",
            "nullable": false,
            "description": "When included in the request, the SMS campaign will be sent out using sendFrom value as the outbound originator. If node is absent in the API call,  then Campaigner will use value set for this field on the account or the SMS  API space as applicable.",
            "example": "Sender 123"
          },
          "includeUnsubscribeMessage": {
            "type": "boolean",
            "nullable": false,
            "description": "Flag indicating whether to automatically include the unsubscribe message in the content.",
            "default": true
          },
          "contents": {
            "$ref": "#/components/schemas/CreateSmsCampaignModelContents"
          },
          "deliveryNotificationEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Collection of email addresses to whom SMS campaign delivery notification email will be sent.",
            "example": [
              "email-1@example.com",
              "email-2@example.com"
            ],
            "maxItems": 5
          }
        }
      },
      "CreateSmsCampaignModelResponse": {
        "type": "object",
        "properties": {
          "smsCampaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": false,
            "example": 123,
            "description": "Id of the created SMS campaign."
          }
        }
      },
      "ApiErrorResponse_SmsCampaign": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "description": "Response code assoicated with the error response."
          },
          "response_message": {
            "type": "string",
            "description": "Response message assoicated with the error response."
          },
          "response_details": {
            "type": "string",
            "description": "Response details assoicated with the error response."
          }
        }
      },
      "SmsCampaignSetRecipientsModel": {
        "type": "object",
        "properties": {
          "sendToAllContacts": {
            "type": "boolean",
            "nullable": true,
            "description": "Indicates whether sms campaign should be sent to all the SMS ready contacts or not.",
            "default": false
          },
          "listIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "description": "Specify list of mailing list ids. Sms campaign message will be sent to those contacts that are in these mailing lists.",
            "example": [
              12345,
              23456
            ]
          },
          "exclusionListIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            },
            "description": "Specify list of mailing list ids. The contacts that are in these mailing lists will be exempted from sending sms campaign messages.",
            "example": [
              34567,
              45678
            ]
          }
        }
      },
      "SearchCriteriaXml": {
        "type": "string",
        "description": "XML compatible to https://ws.campaigner.com/2013/01/ContactsSearchCriteria3.xsd that allows user to specify search criteria.",
        "example": "<contactssearchcriteria><version major='3' minor='0' build='0' revision='0' /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>False</testContactsOnly><group><filter><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>ClickAnyLink</operator></action><operator>PastNDay</operator><value>7</value></filter><filter><relation>Or</relation><filtertype>EmailAction</filtertype><campaign><anycampaign /></campaign><action><status>Do</status><operator>Open</operator></action><operator>PastNDay</operator><value>7</value></filter></group></contactssearchcriteria>"
      },
      "ContactDataV1": {
        "type": "object",
        "description": "Object model to specify what contact data user wants to download.",
        "properties": {
          "returnListMembership": {
            "description": "Flag to indicate to download Ids for mailing lists / static segments to which the contact is currently assigned to.",
            "default": false,
            "type": "boolean"
          },
          "staticFields": {
            "description": "List of static field names to fetch for the contacts that match the requested criteria. 'All' will take precedence over any field names that might be specified and will return all static fields in the export.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "firstName",
                "lastName",
                "phone",
                "email",
                "fax",
                "emailMessageFormat",
                "isTestContact",
                "mobilePhone"
              ]
            },
            "example": [
              "firstName",
              "lastName",
              "email"
            ]
          },
          "systemFields": {
            "description": "List of system field names to fetch for the contacts that match the requested criteria. 'All' will take precedence over any field names that might be specified and will return all static fields in the export.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "emailStatus",
                "smsStatus",
                "engagementScore",
                "rating",
                "createdDateUTC",
                "creationMethod",
                "lastModifiedDateUTC",
                "confirmationDateUTC",
                "optInURL",
                "optinIpAddress",
                "dateLastOpenedUTC",
                "dateLastClickedUTC",
                "dateLastSentToUTC",
                "dateLastUnsubscribedUTC",
                "dateLastConvertedUTC",
                "totalConversionValue",
                "totalConversions",
                "IPLastUnsubscribed",
                "lastBounceReason",
                "emailChangedDateUTC",
                "ownerEmail",
                "ownerFirstName",
                "ownerLastName",
                "geoCity",
                "geoCountry",
                "geoRegion",
                "geoTimeZone",
                "geoZipCode"
              ]
            },
            "example": [
              "emailStatus",
              "smsStatus"
            ]
          },
          "customFieldIds": {
            "description": "List of custom field ids from the account to fetch the contacts information that match the requested criteria. \nValue can be: 0 (All custom fields) or comma separated list of custom field ids. '0' will take precedence over any field ids that \nmight be specified and will return all custom fields in the export.\n",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              123,
              456
            ]
          },
          "returnCampaignData": {
            "description": "Flag to inidicate to download campaign delivery and activity data for the contacts.",
            "type": "boolean",
            "default": false
          }
        },
        "additionalProperties": false
      },
      "ExportContactDataViaSftpV1Model": {
        "required": [
          "searchCriteriaXML"
        ],
        "type": "object",
        "properties": {
          "searchCriteriaXML": {
            "$ref": "#/components/schemas/SearchCriteriaXml"
          },
          "contactData": {
            "$ref": "#/components/schemas/ContactDataV1"
          }
        },
        "additionalProperties": false
      },
      "ExportContactDataViaSftpResponseResult": {
        "type": "object",
        "properties": {
          "referenceNumber": {
            "type": "string",
            "description": "A ticket id AKA reference number that user can use to download the export file which will be created asynchronously as a result of this API execution."
          }
        },
        "additionalProperties": false,
        "example": {
          "referenceNumber": "123456789"
        }
      },
      "ApiError_MissingField": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 1004,
          "responseDetails": null,
          "responseMessage": "The following field is missing from request body: {0}"
        }
      },
      "ApiError_MissingConfig": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 1001,
          "responseDetails": "The following configuration is missing: {0}",
          "responseMessage": "Configuration not found."
        }
      },
      "ApiError_ForbiddenErrorForAccountNotActive": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "response_message": {
            "type": "string"
          },
          "response_details": {
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 2,
          "responseDetails": null,
          "responseMessage": "Account is not active"
        }
      },
      "ContactDataV2": {
        "type": "object",
        "description": "Object model to specify what contact data user wants to download.",
        "properties": {
          "returnListMembership": {
            "description": "Flag to indicate to download Ids for mailing lists / static segments to which the contact is currently assigned to.",
            "default": false,
            "type": "boolean"
          },
          "staticFields": {
            "description": "List of static field names to fetch for the contacts that match the requested criteria. 'All' will take precedence over any field names that might be specified and will return all static fields in the export.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "firstName",
                "lastName",
                "phone",
                "email",
                "fax",
                "emailMessageFormat",
                "isTestContact",
                "mobilePhone"
              ]
            },
            "example": [
              "firstName",
              "lastName",
              "email"
            ]
          },
          "systemFields": {
            "description": "List of system field names to fetch for the contacts that match the requested criteria. 'All' will take precedence over any field names that might be specified and will return all static fields in the export.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "emailStatus",
                "smsStatus",
                "engagementScore",
                "rating",
                "createdDateUTC",
                "creationMethod",
                "lastModifiedDateUTC",
                "confirmationDateUTC",
                "optInURL",
                "optinIpAddress",
                "dateLastOpenedUTC",
                "dateLastClickedUTC",
                "dateLastSentToUTC",
                "dateLastUnsubscribedUTC",
                "dateLastConvertedUTC",
                "totalConversionValue",
                "totalConversions",
                "IPLastUnsubscribed",
                "lastBounceReason",
                "emailChangedDateUTC",
                "ownerEmail",
                "ownerFirstName",
                "ownerLastName",
                "geoCity",
                "geoCountry",
                "geoRegion",
                "geoTimeZone",
                "geoZipCode"
              ]
            },
            "example": [
              "emailStatus",
              "smsStatus"
            ]
          },
          "customFieldIds": {
            "description": "List of custom field ids from the account to fetch the contacts information that match the requested criteria. \nValue can be: 0 (All custom fields) or comma separated list of custom field ids. '0' will take precedence over any field ids that \nmight be specified and will return all custom fields in the export.\n",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              123,
              456
            ]
          }
        },
        "additionalProperties": false
      },
      "ActivityStats": {
        "type": "object",
        "description": "JSON object to specify what contact activity data user wants to download for contacts that match the specified search criteria.",
        "properties": {
          "returnUserAgentInfo": {
            "type": "boolean",
            "default": false,
            "description": "Flag to indicate to download device information (Desktop vs. Mobile) for the campaign activity data."
          },
          "returnDeviceType": {
            "type": "boolean",
            "default": false,
            "description": "Flag to indicate to download user agent information for the campaign activity data"
          },
          "activityEvents": {
            "description": "A list to specify campaign activity events for which to fetch and return the contact data. 'All' will take precedence \nover any activity event that might be specified and will return data for all activity types in the export.\n",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "open",
                "click",
                "forward",
                "reply",
                "unsubscribe",
                "complain",
                "convert"
              ]
            },
            "example": [
              "open",
              "click",
              "forward"
            ]
          }
        },
        "additionalProperties": false
      },
      "CampaignData": {
        "type": "object",
        "description": "JSON object to specify what campaign data user wants to download for contacts that match the specified search criteria.",
        "properties": {
          "deliveryStats": {
            "type": "boolean",
            "default": false,
            "description": "Flag to indicate to download campaign delivery data such as sent, delivered, hardbounced or softbounced events."
          },
          "activityStats": {
            "$ref": "#/components/schemas/ActivityStats"
          }
        },
        "additionalProperties": false
      },
      "ExportContactDataViaSftpV2Model": {
        "required": [
          "searchCriteriaXML"
        ],
        "type": "object",
        "properties": {
          "searchCriteriaXML": {
            "$ref": "#/components/schemas/SearchCriteriaXml"
          },
          "contactData": {
            "$ref": "#/components/schemas/ContactDataV2"
          },
          "campaignData": {
            "$ref": "#/components/schemas/CampaignData"
          }
        },
        "additionalProperties": false
      },
      "ContactDataV3": {
        "type": "object",
        "description": "Object model to specify what contact data user wants to download.",
        "properties": {
          "returnListMembership": {
            "description": "Flag to indicate to download Ids for mailing lists / static segments to which the contact is currently assigned to.",
            "default": false,
            "type": "boolean"
          },
          "staticFields": {
            "description": "List of static field names to fetch for the contacts that match the requested criteria. 'All' will take precedence over any field names that might be specified and will return all static fields in the export.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "firstName",
                "lastName",
                "phone",
                "email",
                "emailMessageFormat",
                "isTestContact",
                "mobilePhone",
                "ownerEmail",
                "ownerFirstName",
                "ownerLastName",
                "emailStatus",
                "smsStatus"
              ]
            },
            "example": [
              "firstName",
              "lastName",
              "email"
            ]
          },
          "systemFields": {
            "description": "List of system field names to fetch for the contacts that match the requested criteria. 'All' will take precedence over any field names that might be specified and will return all static fields in the export.",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "All",
                "createdDateUTC",
                "creationMethod",
                "lastModifiedDateUTC",
                "confirmationDateUTC",
                "optInURL",
                "optinIpAddress",
                "dateLastOpenedUTC",
                "dateLastClickedUTC",
                "dateLastSentToUTC",
                "dateLastUnsubscribedUTC",
                "dateLastConvertedUTC",
                "totalConversionValue",
                "totalConversions",
                "IPLastUnsubscribed",
                "lastBounceReason",
                "emailChangedDateUTC",
                "geoCity",
                "geoCountry",
                "geoRegion",
                "geoTimeZone",
                "geoZipCode",
                "dateLastClickedSMSUTC",
                "dateLastSentToSMSUTC",
                "dateLastUnsubscribedSMSUTC",
                "dateLastOpenedSMTPUTC",
                "dateLastClickedSMTPUTC",
                "dateLastSentToSMTPUTC"
              ]
            },
            "example": [
              "createdDateUTC",
              "emailChangedDateUTC"
            ]
          },
          "customFieldIds": {
            "description": "List of custom field ids from the account to fetch the contacts information that match the requested criteria. \nValue can be: 0 (All custom fields) or comma separated list of custom field ids. '0' will take precedence over any field ids that \nmight be specified and will return all custom fields in the export.\n",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "example": [
              123,
              456
            ]
          }
        },
        "additionalProperties": false
      },
      "ExportContactDataViaSftpV3Model": {
        "required": [
          "searchCriteriaXML"
        ],
        "type": "object",
        "properties": {
          "searchCriteriaXML": {
            "$ref": "#/components/schemas/SearchCriteriaXml"
          },
          "contactData": {
            "$ref": "#/components/schemas/ContactDataV3"
          },
          "campaignData": {
            "$ref": "#/components/schemas/CampaignData"
          }
        },
        "additionalProperties": false
      },
      "GetListsByTypeIdResponse": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "description": "Number of records per page",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Page number of the return data.",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages in the current data set according to the filters of the request.",
            "example": 24
          },
          "totalRecords": {
            "type": "integer",
            "description": "Total number of records in the current data set according to the filters of the request.",
            "example": 237
          },
          "lists": {
            "type": "array",
            "description": "List of list items.",
            "items": {
              "description": "An object describing a list on the account.",
              "additionalProperties": false,
              "properties": {
                "id": {
                  "type": "integer",
                  "description": "Unique identifier for the list.",
                  "example": 123456
                },
                "name": {
                  "type": "string",
                  "description": "Name of the list.",
                  "example": "NewsLetters"
                },
                "type": {
                  "type": "string",
                  "description": "Type of the list.",
                  "example": "MailingList",
                  "enum": [
                    "MailingList",
                    "StaticSegment",
                    "DynamicSegment"
                  ]
                },
                "description": {
                  "type": "string",
                  "description": "The description of the list.",
                  "example": "NewsLetters for Contacts."
                },
                "isTemporary": {
                  "type": "boolean",
                  "description": "Whether the list is temporary.",
                  "example": true
                },
                "isVisibleInForms": {
                  "type": "boolean",
                  "description": "Whether the list is visible in forms in the UI.",
                  "example": false
                },
                "searchCriteriaXML": {
                  "type": "string",
                  "description": "The search criteria XML as set for static segment or dynamic segment. For mailing lists, always return null.",
                  "example": null
                },
                "status": {
                  "type": "string",
                  "description": "The current status of the list.",
                  "example": "Complete",
                  "enum": [
                    "Complete",
                    "Incomplete"
                  ]
                },
                "categoryIds": {
                  "type": "array",
                  "description": "An array of category ids that the list belongs to.",
                  "items": {
                    "type": "integer",
                    "example": [
                      9685968,
                      9854947
                    ]
                  }
                },
                "lastModifiedDateUTC": {
                  "type": "string",
                  "description": "The last modified date of the list in UTC.",
                  "example": "2019-06-19T16:31:21.223"
                }
              }
            }
          }
        },
        "additionalProperties": false
      },
      "CreateListRequest": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "description": "Create list request",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the list/grouping.",
            "nullable": false,
            "example": "Address",
            "maximum": 255
          },
          "type": {
            "type": "string",
            "description": "The type of list/grouping.",
            "nullable": false,
            "example": "MailingList",
            "enum": [
              "MailingList",
              "DynamicSegment"
            ]
          },
          "isTemporary": {
            "type": "boolean",
            "description": "Set to true if this list is to be treated as a temporary.",
            "nullable": true,
            "example": true
          },
          "isVisibleInForms": {
            "type": "boolean",
            "description": "Set to true for inclusion in Campaigner-hosted signup/subscription form. Ignored if the list is a dynamic segment.",
            "nullable": true,
            "example": false
          },
          "searchCriteriaXML": {
            "type": "string",
            "description": "XML similar to https://ws.campaigner.com/2013/01/ContactsSearchCriteria3.xsd that allows user to specify search criteria.\nIf the entity being created is a mailing list or a static segment, then all contacts matching the specified criteria are \nassigned to the entity once created. Mandator for dynamic segments.\n",
            "nullable": true,
            "example": "<contactssearchcriteria><version major=\"3\" minor=\"0\" build=\"0\" revision=\"0\" /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>True</testContactsOnly><group><filter><filtertype>SearchAttributeValue</filtertype><staticattributeid>3</staticattributeid><action><type>Text</type><operator>Containing</operator><value>gmail</value></action></filter></group></contactssearchcriteria>"
          },
          "sampleSize": {
            "type": "integer",
            "description": "For static segments, specify the proportion of contacts meeting the search criteria. \nMandatory if samplingType is specified while creating a static segment. API will respond with an error if node is \nmissing in such case. API will respond with an error in case the node is present for mailing list or dynamic segment creation.\n",
            "nullable": true,
            "example": 100
          },
          "samplingType": {
            "type": "string",
            "description": "For static segments, specify the sampling method for contact assignment.\nIf not specified, all matching contacts will be assigned to the segment.\n",
            "nullable": true,
            "example": "ByNumberOfContacts",
            "enum": [
              "ByNumberOfContacts",
              "ByPercentage"
            ]
          },
          "categoryIds": {
            "type": "array",
            "description": "Array of integers advising category ids to which this list/grouping should be assigned to.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "maximum": 50,
            "example": [
              123,
              456
            ]
          },
          "description": {
            "type": "string",
            "description": "Description of the grouping",
            "nullable": true,
            "example": "Testing Grouping"
          }
        },
        "additionalProperties": false
      },
      "CreateListResult": {
        "type": "object",
        "properties": {
          "listId": {
            "type": "integer",
            "description": "Id representing the grouping that was created.",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false,
        "description": "Response model for List creation"
      },
      "ApiError_CustomFieldNotValidError": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32"
          },
          "response_message": {
            "type": "string",
            "nullable": true
          },
          "response_details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 109,
          "responseDetails": "Invalid id: 47874",
          "responseMessage": "Custom Field Id: 47874 does not exist on the account"
        }
      },
      "ApiError_FeatureDisabled": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32"
          },
          "response_message": {
            "type": "string",
            "nullable": true
          },
          "response_details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 16,
          "responseDetails": "",
          "responseMessage": "Invalid request. Account is not enabled with feature: {0}"
        }
      },
      "GetListByIdResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The list's id.",
            "example": 12345
          },
          "name": {
            "type": "string",
            "description": "The list's name.",
            "example": "My Static Segment"
          },
          "description": {
            "type": "string",
            "description": "The list's description (if any).",
            "example": "All contacts with Email as GMAIL"
          },
          "type": {
            "type": "string",
            "description": "The list's type.",
            "enum": [
              "MailingList",
              "StaticSegment",
              "DynamicSegment"
            ],
            "example": "StaticSegment"
          },
          "isTemporary": {
            "type": "boolean",
            "description": "Returns true if the list has been flagged as a temporary list; else returns false.",
            "example": true
          },
          "isVisible": {
            "type": "boolean",
            "description": "Returns true if the list can currently be added to and be visible on sign-up and subscription management forms.",
            "example": true
          },
          "searchCriteriaXML": {
            "type": "string",
            "description": "If the list is a segment, returns the search criteria XML belonging to the list; if the list is a mailing list, returns NULL.",
            "example": "<contactssearchcriteria><version major=\"3\" minor=\"0\" build=\"0\" revision=\"0\" /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>True</testContactsOnly><group><filter><filtertype>SearchAttributeValue</filtertype><staticattributeid>3</staticattributeid><action><type>Text</type><operator>Containing</operator><value>gmail</value></action></filter></group></contactssearchcriteria>"
          },
          "status": {
            "type": "string",
            "description": "The list's status.",
            "enum": [
              "Complete",
              "Incomplete"
            ],
            "example": "Complete"
          },
          "categoryIds": {
            "type": "array",
            "description": "Array of integers listing the ids of the categories to which the list is currently assigned.",
            "example": [
              4645657,
              5675678
            ]
          },
          "emailContactCount": {
            "description": "Array of the list's contact counts by Email Status.",
            "type": "object",
            "nullable": true,
            "properties": {
              "subscribed": {
                "type": "number",
                "description": "Count of contacts in 'Subscribed' Email Status.",
                "nullable": true
              },
              "unsubscribed": {
                "type": "number",
                "description": "Count of contacts in 'Unsubscribed' Email Status.",
                "nullable": true
              },
              "softBounced": {
                "type": "number",
                "description": "Count of contacts in 'SoftBounced' Email Status.",
                "nullable": true
              },
              "hardBounced": {
                "type": "number",
                "description": "Count of contacts in 'HardBounced' Email Status.",
                "nullable": true
              },
              "pending": {
                "type": "number",
                "description": "Count of contacts in 'Pending' Email Status.",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "example": {
              "subscribed": 123546,
              "unsubscribed": 321,
              "softBounced": 56,
              "hardBounced": 96,
              "pending": 5
            }
          },
          "smsContactCount": {
            "description": "Array of the list's contact counts by SMS Status.",
            "type": "object",
            "nullable": true,
            "properties": {
              "subscribed": {
                "type": "number",
                "description": "Count of contacts in 'Subscribed' SMS Status.",
                "nullable": true
              },
              "unsubscribed": {
                "type": "number",
                "description": "Count of contacts in 'Unsubscribed' SMS Status.",
                "nullable": true
              },
              "hardBounced": {
                "type": "number",
                "description": "Count of contacts in 'HardBounced' SMS Status.",
                "nullable": true
              },
              "pending": {
                "type": "number",
                "description": "Count of contacts in 'Pending' SMS Status.",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "example": {
              "subscribed": 15874,
              "unsubscribed": 369,
              "hardBounced": 967,
              "pending": 559
            }
          },
          "isUpdateInProgress": {
            "type": "boolean",
            "description": "Returns true if contact count calculations for the list are currently in progress.",
            "example": false
          },
          "lastCalculatedUTC": {
            "type": "string",
            "description": "The date and time in UTC when the list's contact counts were last calculated.",
            "example": "2019-08-30T10:44:56.58"
          },
          "lastModifiedDateUTC": {
            "type": "string",
            "description": "The date and time in UTC when the list was last modified.",
            "example": "2019-06-19T16:31:21.223"
          }
        },
        "additionalProperties": false
      },
      "ApiError_ContactNotInAccountError": {
        "type": "object",
        "properties": {
          "response_code": {
            "type": "integer",
            "format": "int32"
          },
          "response_message": {
            "type": "string",
            "nullable": true
          },
          "response_details": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "responseCode": 109,
          "responseDetails": "Invalid id: 847836795",
          "responseMessage": "Contact Id: 847836795 does not exist on the account"
        }
      },
      "CategoryAssignment": {
        "description": "Object advising the category id to be associated with this list/segment.",
        "type": "object",
        "properties": {
          "categoryId": {
            "description": "Id of the category.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "status": {
            "description": "Specify one of the below in order to either assign the list/segment to the category  id (Assigned), or remove the list/segment from the category id (NotAssigned).\n",
            "type": "string",
            "nullable": true,
            "enum": [
              "Assigned",
              "NotAssigned"
            ]
          }
        },
        "additionalProperties": false,
        "example": {
          "categoryId": 12345,
          "status": "Assigned"
        }
      },
      "UpdateListRequest": {
        "type": "object",
        "description": "Update list request",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the list/grouping.",
            "nullable": false,
            "example": "My List",
            "maximum": 255
          },
          "isTemporary": {
            "type": "boolean",
            "description": "Set to true if you wish to create this grouping as a temporary.",
            "nullable": true,
            "example": true
          },
          "isVisibleInForms": {
            "type": "boolean",
            "description": "Set to true in case you wish to include this grouping in a Campaigner hosted sign-up or subscription management form.",
            "nullable": true,
            "example": false
          },
          "searchCriteriaXML": {
            "type": "string",
            "description": "XML similar to https://ws.campaigner.com/2013/01/ContactsSearchCriteria3.xsd that allows user to specify search criteria\n",
            "nullable": true,
            "example": "<contactssearchcriteria><version major=\"3\" minor=\"0\" build=\"0\" revision=\"0\" /><set>Partial</set><evaluatedefault>True</evaluatedefault><testContactsOnly>True</testContactsOnly><group><filter><filtertype>SearchAttributeValue</filtertype><staticattributeid>3</staticattributeid><action><type>Text</type><operator>Containing</operator><value>gmail</value></action></filter></group></contactssearchcriteria>"
          },
          "categoryAssignments": {
            "description": "Array of object where each object advise the category Id to which this list or  segment should be assigned to / unassigned from, if this API update is successful\n",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryAssignment"
            },
            "nullable": true
          },
          "description": {
            "type": "string",
            "description": "Description of the list/grouping",
            "nullable": true,
            "example": "Testing Grouping"
          }
        },
        "additionalProperties": false
      },
      "FieldModel": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "format": "int32",
            "description": "The id of the field"
          },
          "fieldName": {
            "type": "string",
            "nullable": true,
            "description": "Name of the field"
          },
          "fieldType": {
            "type": "string",
            "nullable": true,
            "description": "Advises whether field is a custom field, system field or a static field"
          },
          "fieldDataType": {
            "type": "string",
            "nullable": true,
            "description": "Data type of the field"
          },
          "defaultValue": {
            "type": "string",
            "nullable": true,
            "description": "Default value, set if any, for this field"
          },
          "isContactUniqueIdentifier": {
            "type": "boolean",
            "description": "Returns true in case the field is the contact unique identifier otherwise returns false"
          },
          "staticAttributeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The static attribute id, if any, set by Campaigner for this field otherwise return null"
          },
          "systemAttributeId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The system attribute id, if any, set by Campaigner for this field otherwise return null"
          },
          "allowOtherValueForMultiSelectField": {
            "type": "boolean",
            "nullable": true,
            "description": "Return true if the multi-select field allows other values. Else return false"
          },
          "lastModifiedDateUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date timestamp in UTC when this field was last updated."
          }
        },
        "additionalProperties": false
      },
      "FieldGetResponseResult": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "description": "The number of fields user requested to return per page."
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32",
            "description": "The current page number for which the data is being returned"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of fields that will be downloaded"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of pages it will take to download information about all the fields based on the page_size given by user"
          },
          "fields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FieldModel"
            },
            "nullable": true,
            "description": "Array of field objects, where each object returns information about one field"
          }
        },
        "additionalProperties": false,
        "example": {
          "pageSize": 50,
          "pageNumber": 1,
          "totalRecords": 67,
          "totalPages": 2,
          "fields": [
            {
              "fieldId": 123456,
              "fieldName": "Favorite Color",
              "fieldType": "Custom",
              "fieldDataType": "Text",
              "defaultValue": "Blue",
              "isContactUniqueIdentifier": false,
              "lastModifiedDateUTC": "2019-06-19T16:31:21.223"
            }
          ]
        }
      },
      "FieldCreateRequest": {
        "required": [
          "name",
          "dataType"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the custom field",
            "nullable": false,
            "example": "Address"
          },
          "dataType": {
            "type": "string",
            "description": "Type of the custom field",
            "nullable": false,
            "example": "Text",
            "enum": [
              "Text",
              "Number",
              "Calendar",
              "Boolean",
              "Multi-Select",
              "Single-Select"
            ]
          },
          "defaultValue": {
            "type": "string",
            "description": "Default value for the custom field",
            "nullable": true,
            "example": "123 Heaven Street, Anywhere, ON, Canada, A1A 1A1"
          },
          "allowOtherValue": {
            "type": "boolean",
            "description": "Set to true if you wish to allow other values for multi-select field",
            "default": false,
            "nullable": true,
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "JSON object for Create field request"
      },
      "FieldCreateResult": {
        "type": "object",
        "properties": {
          "fieldId": {
            "type": "integer",
            "description": "The id of the field",
            "format": "int32",
            "example": 1234
          }
        },
        "additionalProperties": false,
        "description": "Response model for Field creation"
      },
      "SignupFormModel": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32",
            "description": "The id of the Sign Up Form.",
            "example": 577264
          },
          "groupId": {
            "type": "string",
            "nullable": true,
            "description": "The id of the group/collection to which the Sign Up Form belongs.",
            "example": 41
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The Sign Up Form’s Name.",
            "example": "Form_12/14/2021 8:19:32 PM"
          },
          "status": {
            "type": "string",
            "nullable": true,
            "description": "The Sign Up Form’s current status.",
            "example": "Complete"
          },
          "optInType": {
            "type": "string",
            "nullable": true,
            "description": "The Sign Up Form’s opt-in type.",
            "example": "Single"
          },
          "language": {
            "type": "string",
            "description": "The Sign Up Form’s language.",
            "example": "French"
          },
          "autoAddToMailingLists": {
            "type": "boolean",
            "nullable": true,
            "description": "Returns true if contacts are automatically added to predefined mailing lists on form submission; otherwise returns false.",
            "example": false
          },
          "notificationEmails": {
            "type": "array",
            "description": "The list of email addresses that are configured as notification emails for the Sign Up Form. Returns NULL when there are no notification emails configured.",
            "items": {
              "type": "integer"
            },
            "example": [
              "ads@outlook.com",
              "sefe@rediff.com"
            ]
          },
          "redirectURLForFormSubmission": {
            "type": "string",
            "nullable": true,
            "description": "The URL that contacts are redirected to after submitting the Sign Up Form.  Returns NULL when there is no redirect URL configured.",
            "example": "http://ddwfegggg.com/dwdqef"
          },
          "welcomeURL": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "The URL that contacts are redirected to after confirming the subscribe action.  Returns NULL when there is no redirect URL configured or when the Sign Up Form is of single opt-in type.",
            "example": null
          },
          "addToMailingLists": {
            "description": "Array of mailing list ids or static segment ids to which contacts will be automatically assigned after submitting the form, or that contacts can opt into when using the Sign Up Form.  Returns NULL when there are no mailing lists / static segments configured.",
            "type": "array",
            "items": {
              "type": "integer"
            },
            "example": [
              96859,
              98549
            ]
          },
          "categories": {
            "type": "array",
            "description": "Array of Sign Up Form categories to which the Sign Up Form is currently assigned",
            "items": {
              "type": "integer"
            },
            "example": [
              85968,
              54947
            ]
          },
          "formURL": {
            "type": "string",
            "nullable": true,
            "description": "The Sign Up Form’s URL. This static URL can be used to load the form in a browser and can be linked to from a webpage.",
            "example": "https://secure.campaigner.com/CSB/Public/Form.aspx?fid=577264&ac=kgi"
          },
          "createdDateUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date timestamp in UTC when the Sign Up Form was created.",
            "example": "2022-06-07T03:08:20.173"
          },
          "lastModifiedDateUTC": {
            "type": "string",
            "format": "date-time",
            "nullable": true,
            "description": "Date timestamp in UTC when the Sign Up Form was last updated.  Returns \"0001-01-01T00:00:00\" if the Sign Up Form has never been updated post-creation.",
            "example": "2022-06-07T07:08:20.17"
          }
        },
        "additionalProperties": false
      },
      "SignupFormGetResult": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "description": "The number of Sign Up Forms returned per page.",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32",
            "description": "The current page number for which data is being returned.",
            "example": 1
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of Sign Up Forms downloaded.",
            "example": 54
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of pages it will take to download information about all of the Sign Up Forms downloaded, based on the page size.",
            "example": 6
          },
          "signupForms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SignupFormModel"
            },
            "nullable": true,
            "description": "Array of Sign Up Forms objects, where each object returns information about one Sign Up Form."
          }
        },
        "additionalProperties": false
      },
      "EmailData": {
        "type": "object",
        "description": "Object to return email related data for this workflow.",
        "properties": {
          "numberOfEmailsSent": {
            "type": "integer",
            "description": "Number of emails sent by this workflow so far.",
            "format": "int32",
            "example": 503
          },
          "lastEmailSentUTC": {
            "type": "string",
            "description": "Date in UTC when last email was sent using this workflow.",
            "format": "date-time",
            "nullable": true,
            "example": "2019-06-19T16:31:21.223"
          }
        },
        "additionalProperties": false
      },
      "SmsData": {
        "type": "object",
        "description": "Object to return SMS related data for this workflow.",
        "properties": {
          "numberOfSMSSent": {
            "type": "integer",
            "description": "Number of SMS messages (and not SMS segments where one SMS message may contain one/more segments) sent by this workflow so far.\nReturn zero (0) in case:\nAccount is enabled with SMS but there are no SMS messages sent so far using this workflow OR\nAccount is disabled with 'SMS' feature\n",
            "format": "int64",
            "example": 55
          },
          "lastSMSSentUTC": {
            "type": "string",
            "description": "Date in UTC when last SMS message was sent using this workflow.",
            "format": "date-time",
            "nullable": true,
            "example": "2019-06-19T16:31:21.223"
          }
        },
        "additionalProperties": false
      },
      "Workflow": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the workflow.",
            "format": "int32",
            "example": 98878432
          },
          "name": {
            "type": "string",
            "description": "The name of the workflow.",
            "nullable": true,
            "example": "Welcome Workflow"
          },
          "description": {
            "type": "string",
            "description": "The short description of the workflow.",
            "nullable": true,
            "example": "Welcome new contacts to the account."
          },
          "status": {
            "type": "string",
            "description": "Current status of the workflow",
            "nullable": true,
            "enum": [
              "Incomplete",
              "Active",
              "Inactive",
              "Deactivated",
              "Test"
            ]
          },
          "triggerType": {
            "type": "string",
            "description": "The type of trigger for the workflow.",
            "nullable": true,
            "enum": [
              "API",
              "Time",
              "Rules"
            ]
          },
          "emailData": {
            "$ref": "#/components/schemas/EmailData"
          },
          "smsData": {
            "$ref": "#/components/schemas/SmsData"
          },
          "limitContactToOneRun": {
            "description": "Return true in case workflow is configured to accept a contact only once.",
            "type": "boolean",
            "example": false
          },
          "activationDateUTC": {
            "type": "string",
            "description": "Date in UTC when this workflow was last activated. Return NULL in case the workflow was never activated.",
            "format": "date-time",
            "nullable": true,
            "example": "2019-06-19T16:31:21.223"
          },
          "categoryIds": {
            "type": "array",
            "description": "Array of workflow categories to which this workflow is currently assigned to.",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "example": [
              9685968,
              9854947
            ]
          },
          "acceptingNewContacts": {
            "type": "boolean",
            "description": "Return True in case workflow is configured to accept new contacts.",
            "example": true
          },
          "createdDateUTC": {
            "type": "string",
            "format": "date-time",
            "description": "Date timestamp in UTC when this workflow was created.",
            "nullable": true,
            "example": "2019-06-19T16:31:21.223"
          },
          "lastModifiedDateUTC": {
            "type": "string",
            "description": "Date timestamp in UTC when this workflow was last updated.",
            "format": "date-time",
            "nullable": true,
            "example": "2019-06-19T16:31:21.223"
          }
        },
        "additionalProperties": false
      },
      "GetWorkflowsResponse": {
        "type": "object",
        "description": "Response object for the Get Workflows API.",
        "properties": {
          "pageSize": {
            "type": "integer",
            "description": "Number of records per page",
            "format": "int32",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Page number of the return data.",
            "format": "int32",
            "example": 1
          },
          "totalRecords": {
            "type": "integer",
            "description": "Total number of pages in the current data set according to the filters of the request.",
            "format": "int32",
            "example": 237
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of records in the current data set according to the filters of the request.",
            "format": "int32",
            "example": 24
          },
          "workflows": {
            "type": "array",
            "description": "List of workflow items.",
            "items": {
              "$ref": "#/components/schemas/Workflow"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetContactDetailsByIdResponse": {
        "type": "object",
        "properties": {
          "contactId": {
            "description": "Unique identifier of the contact",
            "type": "integer",
            "format": "int64",
            "example": 76194836
          },
          "isDeleted": {
            "description": "Flag to indicate if the contact is deleted",
            "type": "boolean",
            "example": false
          },
          "systemFields": {
            "description": "Fields that are system generated and cannot be modified",
            "type": "object",
            "nullable": true,
            "properties": {
              "createdDateUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "creationMethod": {
                "type": "string",
                "nullable": true
              },
              "lastModifiedDateUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "confirmationDateUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "optInURL": {
                "type": "string",
                "nullable": true
              },
              "optinIpAddress": {
                "type": "string",
                "nullable": true
              },
              "dateLastOpenedUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastClickedUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastSentToUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastUnsubscribedUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastConvertedUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "totalConversionValue": {
                "type": "number",
                "format": "double",
                "nullable": true
              },
              "totalConversions": {
                "type": "integer",
                "format": "int32",
                "nullable": true
              },
              "IPLastUnsubscribed": {
                "type": "string",
                "nullable": true
              },
              "lastBounceReason": {
                "type": "string",
                "nullable": true
              },
              "emailChangedDateUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "geoCity": {
                "type": "string",
                "nullable": true
              },
              "geoCountry": {
                "type": "string",
                "nullable": true
              },
              "geoRegion": {
                "type": "string",
                "nullable": true
              },
              "geoTimeZone": {
                "type": "string",
                "nullable": true
              },
              "geoZipCode": {
                "type": "string",
                "nullable": true
              },
              "dateLastClickedSMSUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastSentToSMSUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastUnsubscribedSMSUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastOpenedSMTPUTC": {
                "type": "string",
                "format": "date-time",
                "nullable": true
              },
              "dateLastClickedSMTPUTC": {
                "type": "string",
                "format": "date-time"
              },
              "dateLastSentToSMTPUTC": {
                "type": "string",
                "format": "date-time"
              }
            },
            "additionalProperties": false,
            "example": {
              "createdDateUTC": "2021-07-01T00:00:00Z",
              "creationMethod": "API",
              "lastModifiedDateUTC": "2021-07-01T00:00:00Z",
              "confirmationDateUTC": "2021-07-01T00:00:00Z",
              "optInURL": "https://www.example.com/optin"
            }
          },
          "staticFields": {
            "description": "Fields that are static and present in every contact regardless of account.",
            "type": "object",
            "nullable": true,
            "properties": {
              "firstName": {
                "type": "string",
                "nullable": true
              },
              "lastName": {
                "type": "string",
                "nullable": true
              },
              "phone": {
                "type": "string",
                "nullable": true
              },
              "mobilePhone": {
                "type": "string",
                "nullable": true
              },
              "email": {
                "type": "string",
                "nullable": true
              },
              "fax": {
                "type": "string",
                "nullable": true
              },
              "emailMessageFormat": {
                "type": "string",
                "nullable": true
              },
              "isTestContact": {
                "type": "boolean",
                "nullable": true
              },
              "ownerEmail": {
                "type": "string",
                "nullable": true
              },
              "ownerFirstName": {
                "type": "string",
                "nullable": true
              },
              "ownerLastName": {
                "type": "string",
                "nullable": true
              },
              "emailStatus": {
                "type": "string",
                "nullable": true
              },
              "smsStatus": {
                "type": "string",
                "nullable": true
              }
            },
            "additionalProperties": false,
            "example": {
              "firstName": "John",
              "lastName": "Doe",
              "phone": "123-456-7890",
              "mobilePhone": "123-456-7890",
              "email": "john@doe.com"
            }
          },
          "customFields": {
            "description": "Custom fields that are specific to the account",
            "type": "array",
            "nullable": true,
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                },
                "name": {
                  "type": "string",
                  "nullable": false
                },
                "value": {
                  "type": "string",
                  "nullable": true
                }
              },
              "additionalProperties": false
            },
            "example": [
              {
                "id": 94865607,
                "name": "city",
                "value": "Toronto"
              },
              {
                "id": 9400659054,
                "name": "isNew",
                "value": false
              },
              {
                "id": 172483495,
                "name": "Favorite Color(s)",
                "value": "Red|Orange"
              },
              {
                "id": 406606054,
                "name": "Address",
                "value": "2 Gurdwara Road"
              },
              {
                "id": 985690003,
                "name": "Current Status",
                "value": "Lead"
              },
              {
                "id": 98878383,
                "name": "Comments",
                "value": "Member since 2002"
              }
            ]
          },
          "listMemberships": {
            "description": "Status of the contact's membership in mailing lists and static segments",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "listId": {
                  "type": "integer",
                  "format": "int32",
                  "nullable": false
                },
                "listStatus": {
                  "type": "string",
                  "nullable": false,
                  "enum": [
                    "Assigned",
                    "NotAssigned"
                  ]
                }
              },
              "additionalProperties": false
            },
            "example": [
              {
                "listId": 123456,
                "listStatus": "Assigned"
              },
              {
                "listId": 789012,
                "listStatus": "NotAssigned"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "TriggerWorkflow": {
        "description": "Object of two parameters to advise whether to trigger applicable workflows after this contact update/create.",
        "type": "object",
        "nullable": true,
        "properties": {
          "triggerAllWorkflows": {
            "description": "Set to true if Campaigner should trigger all applicable workflows after this contact update/create.",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "triggerSpecificWorkflows": {
            "description": "Specify a list of workflow Ids that you wish to trigger for this contact update/create. Will raise an error if both triggerAllWorkflows is set to true and triggerSpecificWorkflows have values specified.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true,
            "example": [
              1,
              2,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "StaticField": {
        "description": "Static field values for a contact.",
        "type": "object",
        "nullable": true,
        "properties": {
          "email": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact email"
          },
          "firstName": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact first name"
          },
          "lastName": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact last name"
          },
          "phone": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact Phone Number"
          },
          "mobilePhone": {
            "type": "string",
            "nullable": true,
            "description": "Value for Mobile Number"
          },
          "fax": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact fax"
          },
          "emailMessageFormat": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact email message format"
          },
          "emailStatus": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact's email status"
          },
          "smsStatus": {
            "type": "string",
            "nullable": true,
            "description": "Value for contact's SMS status"
          },
          "isTestContact": {
            "type": "boolean",
            "nullable": true,
            "description": "Value for contact isTestContact"
          },
          "ownerEmail": {
            "type": "string",
            "nullable": true,
            "description": "Value for the contact's owner email property"
          },
          "ownerFirstName": {
            "type": "string",
            "nullable": true,
            "description": "Value for the contact's owner first name property"
          },
          "ownerLastName": {
            "type": "string",
            "nullable": true,
            "description": "Value for the contact's owner last name property"
          }
        },
        "additionalProperties": false,
        "example": {
          "email": "john@doe.com",
          "firstName": "John",
          "lastname": "Doe"
        }
      },
      "CustomField": {
        "description": "A custom field object for a contact.",
        "type": "object",
        "properties": {
          "id": {
            "description": "The unique identifier for the custom field.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "value": {
            "description": "The value of the custom field for the contact.",
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "id": 145322,
          "value": "Custom Field Value"
        }
      },
      "ListMembership": {
        "description": "A list membership object for a contact to assign or unassign from a mailing list.",
        "type": "object",
        "properties": {
          "listId": {
            "description": "The unique identifier for the mailing list.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "listStatus": {
            "description": "The status of the contact in the mailing list.",
            "type": "string",
            "format": "int32",
            "nullable": true,
            "enum": [
              "Assigned",
              "NotAssigned"
            ]
          }
        },
        "additionalProperties": false,
        "example": {
          "listId": 12345,
          "listStatus": "Assigned"
        }
      },
      "UpdateContactRequest": {
        "type": "object",
        "properties": {
          "resubscribeContact": {
            "description": "Set to True in case you wish to re-subscribe the contact on email and/or SMS channel",
            "type": "boolean",
            "nullable": true,
            "default": false
          },
          "triggerWorkflows": {
            "$ref": "#/components/schemas/TriggerWorkflow",
            "nullable": true
          },
          "staticFields": {
            "$ref": "#/components/schemas/StaticField",
            "nullable": true
          },
          "customFields": {
            "description": "An array of individual custom field objects for a contact.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          },
          "listMemberships": {
            "description": "Array of objects where each object advise the mailing list Id (Comma Separated) to which this contact should be assigned to or unassigned from.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListMembership"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpsertContactRequest": {
        "type": "object",
        "properties": {
          "contactId": {
            "description": "The contact id as assigned by Campaigner for which the information should be updated. If id is provided, the call will be treated as an update. If not provided, the call will check the primary key field to determine if its an update or an insert.",
            "type": "integer",
            "nullable": true,
            "example": 83394729903
          },
          "resubscribeContact": {
            "description": "Set to True in case you wish to re-subscribe the contact on email and/or SMS channel.",
            "type": "boolean",
            "nullable": true
          },
          "triggerWorkflows": {
            "$ref": "#/components/schemas/TriggerWorkflow",
            "nullable": true
          },
          "staticFields": {
            "$ref": "#/components/schemas/StaticField",
            "nullable": true
          },
          "customFields": {
            "description": "An array of individual custom field objects for a contact.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          },
          "listMemberships": {
            "description": "Array of objects where each object advise the mailing list Id (Comma Separated) to which this contact should be assigned to or unassigned from.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListMembership"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateContactResult": {
        "type": "object",
        "properties": {
          "contactId": {
            "description": "The unique identifier for the contact.",
            "type": "integer",
            "format": "int64",
            "example": 83394729903
          },
          "contactUniqueIdentifier": {
            "description": "The field value that is unique for the contact in the account, i.e. the primary key of the contact.",
            "type": "string",
            "nullable": true,
            "example": "john@doe.com"
          }
        },
        "additionalProperties": false
      },
      "GetAllContactsResult": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "description": "Number of records per page",
            "example": 10
          },
          "pageNumber": {
            "type": "integer",
            "description": "Page number of the return data.",
            "example": 1
          },
          "totalPages": {
            "type": "integer",
            "description": "Total number of pages in the current data set.",
            "example": 24
          },
          "totalRecords": {
            "type": "integer",
            "description": "Total number of records in the current data set.",
            "example": 237
          },
          "contacts": {
            "type": "array",
            "description": "List of contact detials.",
            "items": [
              {
                "$ref": "#/components/schemas/GetContactDetailsByIdResponse"
              }
            ]
          }
        },
        "additionalProperties": false
      },
      "ListMemberships": {
        "type": "object",
        "properties": {
          "listId": {
            "description": "The unique identifier for the mailing list.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false,
        "example": {
          "listId": 12345
        }
      },
      "CreateContactRequest": {
        "type": "object",
        "properties": {
          "triggerWorkflows": {
            "$ref": "#/components/schemas/TriggerWorkflow"
          },
          "staticFields": {
            "$ref": "#/components/schemas/StaticField"
          },
          "customFields": {
            "description": "An array of individual custom field objects for the new contact.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true
          },
          "listMemberships": {
            "description": "Array of objects where each object advise the mailing list Id (Comma Separated) to which this contact should be assigned to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListMemberships"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ImportContactsRequest": {
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "nullable": true,
            "description": "Id as assigned by Campaigner for which the information should be updated",
            "example": 3435545
          },
          "staticFields": {
            "$ref": "#/components/schemas/StaticField",
            "description": "Object to specify static field values for a contact"
          },
          "customFields": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomField"
            },
            "nullable": true,
            "description": "An array of individual custom field objects for a contact."
          },
          "listMemberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ListMembership"
            },
            "nullable": true,
            "description": "Array of objects where each object advise the mailing list Id (Comma Separated) to which this contact should be assigned to or unassigned from."
          }
        },
        "additionalProperties": false
      },
      "BulkImportContactsRequest": {
        "type": "object",
        "properties": {
          "resubscribeContact": {
            "type": "boolean",
            "nullable": true,
            "description": "You want to re-subscribe the contact on email and/or SMS channel, set to true"
          },
          "triggerWorkflows": {
            "$ref": "#/components/schemas/TriggerWorkflow",
            "description": "Array of two parameters to advise whether to trigger applicable workflows after this contact update"
          },
          "contacts": {
            "type": "array",
            "description": "Array of objects to specify contacts data that will be imported (add/revive/update)",
            "items": {
              "$ref": "#/components/schemas/ImportContactsRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "ImportContactsResult": {
        "type": "object",
        "properties": {
          "recordNumber": {
            "type": "integer",
            "description": "Specifies the index of this contact object in the original contact array specified",
            "example": 1
          },
          "importStatus": {
            "type": "string",
            "description": "Specifies whether the specific contact record is successfully imported (ContactCreated/ContactUpdated/Failed) or not",
            "example": "ContactCreated"
          },
          "importResponseCode": {
            "type": "string",
            "nullable": true,
            "description": "Specifices contact record import is not successful, returns the response code value otherwise null",
            "example": null
          },
          "importResponseMessage": {
            "type": "string",
            "nullable": true,
            "description": "Specifices contact record import is not successful, returns the response message value otherwise null",
            "example": null
          },
          "importResponseDetails": {
            "type": "string",
            "nullable": true,
            "description": "Specifices contact record import is not successful, returns the response details value otherwise null",
            "example": null
          },
          "contactId": {
            "type": "integer",
            "format": "int64",
            "description": "Specifices contact record import is successful, returns ID of the contact otherwise null",
            "example": 1234
          },
          "contactUniqueIdentifier": {
            "type": "string",
            "description": "Specifices contact record import is successful, returns contact unique identifier otherwise null",
            "example": "john@doe.com"
          }
        },
        "additionalProperties": false
      },
      "BulkImportContactsResult": {
        "type": "object",
        "properties": {
          "numberOfContactsCreated": {
            "type": "integer",
            "description": "Number of contacts were successfully created / revived as a result of this API call",
            "example": 1
          },
          "numberOfContactsUpdated": {
            "type": "integer",
            "description": "Number of contacts were successfully updated as a result of this API call",
            "example": 0
          },
          "numberOfContactsFailed": {
            "type": "integer",
            "description": "Number of contacts failed to import as a result of this API call processing",
            "example": 0
          },
          "contacts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportContactsResult"
            }
          }
        },
        "additionalProperties": false
      },
      "BulkDeleteContactsRequest": {
        "type": "object",
        "properties": {
          "contactids": {
            "type": "array",
            "nullable": false,
            "description": "Array of one or more integers containing one or more Campaigner-assigned contact Id values.",
            "items": {
              "type": "integer",
              "format": "int64",
              "minimum": 1
            },
            "example": [
              1,
              2,
              3
            ]
          }
        },
        "additionalProperties": false
      },
      "BulkDeleteContactsResult": {
        "type": "object",
        "properties": {
          "totalRequested": {
            "type": "integer",
            "description": "Total number of contact id values included in the API request.",
            "example": 6
          },
          "totalUniqueRequested": {
            "type": "integer",
            "description": "Total number of unique contact id values included in the API request.",
            "example": 5
          },
          "totalDeleted": {
            "type": "integer",
            "description": "Total number of unique contacts that were successfully deleted.",
            "example": 4
          },
          "totalAlreadyDeleted": {
            "type": "integer",
            "description": "Total number of unique contacts that are already deleted and were therefore skipped.",
            "example": 1
          },
          "invalidContactIds": {
            "description": "Array of contact ids that were included in the API request but were invalid or unknown.",
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            },
            "example": [
              9999
            ]
          }
        },
        "additionalProperties": false
      },
      "EmailCampaignCategoryAssignments": {
        "type": "object",
        "properties": {
          "categoryId": {
            "description": "The unique identifier for the category assignment.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryAssignmentStatus": {
            "description": "Specify one of the below in order to either assign the email campaign to the category id in question (Assigned), or remove the email campaign from the category id in question (NotAssigned).",
            "type": "string",
            "nullable": true,
            "enum": [
              "Assigned",
              "NotAssigned"
            ]
          }
        },
        "additionalProperties": false,
        "example": {
          "categoryId": 12345,
          "categoryAssignmentStatus": "NotAssigned"
        }
      },
      "EmailCampaignContents": {
        "type": "object",
        "description": "Contains the campaign content details.",
        "required": [
          "contentSourceType"
        ],
        "properties": {
          "contentSourceType": {
            "type": "string",
            "nullable": false,
            "description": "Specify an existing source for the campaign content.  Depending upon your selection here, you may need to include additional parameters in order to provide more information.",
            "enum": [
              "Template",
              "Campaign",
              "URL",
              "Custom"
            ],
            "example": "Campaign"
          },
          "templateId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "If you specified ‘Template' as the content source, here you must specify the id of the template in question. Content will  be copied from the specified template and used as the content for the new email campaign that will be created as a result  of this API call.",
            "example": 32456
          },
          "campaignId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "If you specified 'Campaign' as the content source, here you must specify the id of the campaign in question. Content will  be copied from the specified campaign and used as the content for the new SMS campaign that will be created as a result of this API call.",
            "example": 123456
          },
          "fromURL": {
            "type": "string",
            "nullable": true,
            "description": "If you specified ‘URL' as the content source, here you must specify the full URL. The HTML content found at the specified  URL will be copied and used as the content for the new email campaign that will be created as a result of this API call.",
            "example": ""
          },
          "HTMLContent": {
            "type": "string",
            "nullable": true,
            "description": "If you specified ‘Custom' as the content source, here you must specify the HTML content.",
            "example": "Good Morning<br \\/> <br \\/> <img src=\\\"https:\\/\\/media.campaigner.com\\/media\\/47\\/475770\\/Flowers\\/8236.jpg?g=1561494805881\\\" alt=\\\"8236.jpg\\\" \\/>"
          },
          "textContent": {
            "type": "string",
            "nullable": true,
            "description": "If you specified ‘Custom' as the content source, here you must specify the Plain Text content.",
            "example": "Good Morning"
          },
          "generateTextContentFromHTML": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to true if you want the Plain Text content of your campaign to be automatically generated based upon its HTML content.",
            "example": false
          }
        }
      },
      "EmailCampaignSubscriptionSettings": {
        "type": "object",
        "description": "Contains the campaign's subscription settings.",
        "properties": {
          "subscriptionManagementFormId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The id of the Subscription Form that will be used for this campaign.Unless otherwise specified here, your account's Default Subscription Form will automatically be used for the campaign.",
            "example": 32456
          },
          "footerMessageId": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "description": "The id of the Unsubscribe Message that will be used for this campaign.",
            "example": 123456
          }
        }
      },
      "EmailCampaignSocialSharing": {
        "type": "object",
        "description": "Contains Sharebar 'Sign Up' button settings.",
        "required": [
          "signUpFormButtonText",
          "signUpFormId"
        ],
        "properties": {
          "signUpFormButtonText": {
            "type": "string",
            "nullable": false,
            "description": "The 'Sign Up' button label text.",
            "example": "Contains the campaign's subscription settings."
          },
          "signUpFormId": {
            "type": "integer",
            "format": "int32",
            "nullable": false,
            "description": "The id of the Sign Up Form that should be displayed when the 'Sign Up' button is clicked.",
            "example": 854985
          }
        }
      },
      "EmailCampaignViewOnline": {
        "type": "object",
        "description": "Contains 'View Online' link settings.",
        "properties": {
          "labelBefore": {
            "type": "string",
            "nullable": false,
            "description": "The text that will be displayed before the 'View Online' link.",
            "maximum": 300,
            "example": "Trouble viewing this email?"
          },
          "viewOnlineLinkLabel": {
            "type": "string",
            "nullable": true,
            "description": "The 'View Online' link text.",
            "maximum": 300,
            "example": "Read it online"
          },
          "viewOnlinePosition": {
            "type": "string",
            "nullable": true,
            "description": "The positioning of the 'View Online' link and its accompanying before & after textual elements: either 'Top' (this is the default) or 'Bottom'.\n",
            "maximum": 300,
            "default": "Top",
            "example": "Bottom"
          }
        }
      },
      "EmailCampaignGoogleAnalytics": {
        "type": "object",
        "description": "Contains Google Analytics tracking parameter settings.",
        "properties": {
          "utmSource": {
            "type": "string",
            "nullable": false,
            "description": "The 'Utm_Source' parameter value. By default, this will be set to 'Email Marketing'.",
            "maximum": 50,
            "default": "Email Marketing"
          },
          "utmCampaign": {
            "type": "string",
            "nullable": true,
            "description": "The 'Utm_Campaign' parameter value. By default, this will be set to the current name of the campaign.",
            "maximum": 50,
            "default": "Name of the campaign"
          },
          "utmContent": {
            "type": "string",
            "nullable": true,
            "description": "The 'Utm_Content' parameter value. By default, this will be set to blank.",
            "maximum": 50,
            "example": "Bottom"
          },
          "utmMedium": {
            "type": "string",
            "nullable": true,
            "description": "The 'Utm_Medium' parameter value. By default, this will be set to 'HTML'.",
            "maximum": 50,
            "default": "HTML"
          }
        }
      },
      "CreateEmailCampaignRequest": {
        "type": "object",
        "required": [
          "subject",
          "fromName",
          "fromEmailId"
        ],
        "properties": {
          "categoryAssignments": {
            "description": "Array of objects where each object advise the category Id (Comma Separated) to which this email campaign should be assigned to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailCampaignCategoryAssignments"
            },
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": false,
            "description": "The campaign's name.  If no name is provided, a name will be automatically generated.",
            "example": "Erica Davis Scholarship (DEVO)",
            "maximum": 255
          },
          "subject": {
            "type": "string",
            "nullable": false,
            "description": "The campaign's subject line.",
            "example": "Dream Big: Apply for Erica Davis Memorial Scholarship!",
            "maximum": 500
          },
          "isWorkflowCampaign": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to true if you intend to use this campaign as part of workflow.",
            "example": true
          },
          "fromName": {
            "type": "string",
            "nullable": false,
            "description": "The friendly 'From' that the email will come from.",
            "example": "Maple Leaf Foods",
            "maximum": 255
          },
          "fromEmailId": {
            "type": "integer",
            "nullable": false,
            "description": "The id of the validated From Email to use for this campaign.",
            "example": 577987
          },
          "replyEmailId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the validated From Email to use as the Reply-To Email for this campaign. When this parameter is omitted from the request, the specified From Email is automatically  used as the Reply-To Email.\n",
            "example": 767575
          },
          "autoreplyMessageId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the Auto-Reply Message that will be automatically sent to  recipients who reply to this campaign.\n",
            "example": 6848484
          },
          "trackReplies": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to true if want all replies to the campaign to be tracked.",
            "example": false
          },
          "preHeader": {
            "type": "string",
            "nullable": false,
            "description": "This is the teaser content that will appear under the subject line when recipients view the email in their mail client of choice.\n",
            "example": "Hi [Contact.First Name], enjoy a fun family long weekend with guilt-free Natural Top Dogs.",
            "maximum": 500
          },
          "trackAllLinkClicks": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to false if you do not want any link clicks for this campaign to be tracked.",
            "example": false
          },
          "trackConversions": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to true if want to track conversions from link clicks in the campaign. Please note that the trackAllLinkClicks parameter must also be included and set to true in your request.\n",
            "example": false
          },
          "contents": {
            "$ref": "#/components/schemas/EmailCampaignContents"
          },
          "subscriptionSettings": {
            "$ref": "#/components/schemas/EmailCampaignSubscriptionSettings"
          },
          "mailingAddress": {
            "type": "string",
            "nullable": false,
            "description": "Specify a mailing address here if you want a mailing address to be displayed in the campaign's footer.",
            "example": "2 Gurdwara Rd, Ottawa, ON K2E 1A2",
            "maximum": 200
          },
          "signUpFormSettingsForSocialSharing": {
            "$ref": "#/components/schemas/EmailCampaignSocialSharing"
          },
          "viewOnlineSettings": {
            "$ref": "#/components/schemas/EmailCampaignViewOnline"
          },
          "googleAnalyticsSettings": {
            "$ref": "#/components/schemas/EmailCampaignGoogleAnalytics"
          },
          "enableCustomURLParameters": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to true if you want to automatically include custom URL parameters to all links in the campaign.",
            "example": false
          },
          "customURLParametersSettings": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specify a minimum of 1 and a maximum of 5 comma-separated custom URL parameter key-value pairs.",
            "example": "\"Q1\":\"J2 Global\", \"Q2\":\"2 Gurdwara Road\", \"Q3\":\"Ottawa\", \"Q4\":\"Ontario\", \"Q5\":\"K2E 1A2\"",
            "minItems": 1,
            "maxItems": 5
          },
          "enableAdobeAnalytics": {
            "type": "boolean",
            "nullable": false,
            "description": "Set to true if you want to enable Adobe Analytics tracking for the campaign.",
            "example": false
          },
          "encoding": {
            "type": "string",
            "nullable": true,
            "description": "Specify the character set that will instruct the recipient's email client or browser on how to display the  various characters in your email.",
            "enum": [
              "Default",
              "Western (Windows)",
              "UTF-8",
              "Unspecified",
              "Baltic (ISO)",
              "Baltic (Windows)",
              "Central European (ISO)",
              "Central European (Windows)",
              "Cyrillic (ISO)",
              "Cyrillic (Windows)",
              "Greek (ISO)",
              "Greek (Windows)",
              "Turkish (ISO)",
              "Turkish (Windows)",
              "Western (ISO)",
              "Vietnamese (Windows)"
            ],
            "default": "UTF-8"
          },
          "deliveryNotificationEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specify up to 5 email addresses that will receive an email notification when this campaign is sent.",
            "example": [
              "email-1@example.com",
              "email-2@example.com"
            ],
            "maxItems": 5
          }
        },
        "additionalProperties": false
      },
      "CreateEmailCampaignResult": {
        "type": "object",
        "properties": {
          "contactId": {
            "description": "The id of the email campaign that was created as a result of this API call.",
            "type": "integer",
            "format": "int32",
            "example": 456999796
          }
        },
        "additionalProperties": false
      },
      "EmailCampaignCategoryAssignment": {
        "type": "object",
        "properties": {
          "categoryId": {
            "description": "The unique identifier for the category assignment.",
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "categoryAssignmentStatus": {
            "description": "Specify one of the below in order to either assign the email campaign to the category id in question (Assigned), or remove the email campaign from the category id in question (NotAssigned).",
            "type": "string",
            "nullable": true,
            "enum": [
              "Assigned",
              "NotAssigned"
            ]
          }
        },
        "additionalProperties": false,
        "example": {
          "categoryId": 12345,
          "categoryAssignmentStatus": "NotAssigned"
        }
      },
      "UpdateEmailCampaignRequest": {
        "type": "object",
        "properties": {
          "categoryAssignments": {
            "description": "Array of objects where each object advise the category Id (Comma Separated) to which this email campaign should be assigned to.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailCampaignCategoryAssignment"
            },
            "nullable": false
          },
          "name": {
            "type": "string",
            "nullable": false,
            "description": "The campaign's name.  If no name is provided, a name will be automatically generated.",
            "example": "Erica Davis Scholarship (DEVO)",
            "maximum": 255
          },
          "subject": {
            "type": "string",
            "nullable": false,
            "description": "The campaign's subject line.",
            "example": "Dream Big: Apply for Erica Davis Memorial Scholarship!",
            "maximum": 500
          },
          "isWorkflowCampaign": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to true if you intend to use this campaign as part of workflow.",
            "example": true
          },
          "fromName": {
            "type": "string",
            "nullable": false,
            "description": "The friendly 'From' that the email will come from.",
            "example": "Maple Leaf Foods",
            "maximum": 255
          },
          "fromEmailId": {
            "type": "integer",
            "nullable": false,
            "description": "The id of the validated From Email to use for this campaign.",
            "example": 577987
          },
          "replyEmailId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the validated From Email to use as the Reply-To Email for this campaign. When this parameter is omitted from the request, the specified From Email is automatically  used as the Reply-To Email.\n",
            "example": 767575
          },
          "autoreplyMessageId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the Auto-Reply Message that will be automatically sent to  recipients who reply to this campaign.\n",
            "example": 6848484
          },
          "trackReplies": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to true if want all replies to the campaign to be tracked.",
            "example": false
          },
          "preHeader": {
            "type": "string",
            "nullable": true,
            "description": "This is the teaser content that will appear under the subject line when recipients view the email in their mail client of choice.\n",
            "example": "Hi [Contact.First Name], enjoy a fun family long weekend with guilt-free Natural Top Dogs.",
            "maximum": 500
          },
          "trackAllLinkClicks": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to false if you do not want any link clicks for this campaign to be tracked.",
            "example": false
          },
          "trackConversions": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to true if want to track conversions from link clicks in the campaign. Please note that the trackAllLinkClicks parameter must also be included and set to true in your request.\n",
            "example": false
          },
          "contents": {
            "$ref": "#/components/schemas/EmailCampaignContents"
          },
          "subscriptionSettings": {
            "$ref": "#/components/schemas/EmailCampaignSubscriptionSettings"
          },
          "mailingAddress": {
            "type": "string",
            "nullable": false,
            "description": "Specify a mailing address here if you want a mailing address to be displayed in the campaign's footer.",
            "example": "2 Gurdwara Rd, Ottawa, ON K2E 1A2",
            "maximum": 200
          },
          "signUpFormSettingsForSocialSharing": {
            "$ref": "#/components/schemas/EmailCampaignSocialSharing"
          },
          "viewOnlineSettings": {
            "$ref": "#/components/schemas/EmailCampaignViewOnline"
          },
          "googleAnalyticsSettings": {
            "$ref": "#/components/schemas/EmailCampaignGoogleAnalytics"
          },
          "enableCustomURLParameters": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to true if you want to automatically include custom URL parameters to all links in the campaign.",
            "example": false
          },
          "customURLParametersSettings": {
            "type": "object",
            "description": "Specify a minimum of 1 and a maximum of 5 comma-separated custom URL parameter key-value pairs.",
            "example": {
              "Q1": "J2 Global",
              "Q2": "2 Gurdwara Road",
              "Q3": "Ottawa",
              "Q4": "Ontario",
              "Q5": "K2E 1A2"
            },
            "minItems": 1,
            "maxItems": 5
          },
          "enableAdobeAnalytics": {
            "type": "boolean",
            "nullable": true,
            "description": "Set to true if you want to enable Adobe Analytics tracking for the campaign.",
            "example": false
          },
          "encoding": {
            "type": "string",
            "nullable": false,
            "description": "Specify the character set that will instruct the recipient's email client or browser on how to display the  various characters in your email.",
            "enum": [
              "Default",
              "Western (Windows)",
              "UTF-8",
              "Unspecified",
              "Baltic (ISO)",
              "Baltic (Windows)",
              "Central European (ISO)",
              "Central European (Windows)",
              "Cyrillic (ISO)",
              "Cyrillic (Windows)",
              "Greek (ISO)",
              "Greek (Windows)",
              "Turkish (ISO)",
              "Turkish (Windows)",
              "Western (ISO)",
              "Vietnamese (Windows)"
            ],
            "default": "UTF-8"
          },
          "deliveryNotificationEmailAddresses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Specify up to 5 email addresses that will receive an email notification when this campaign is sent.",
            "example": [
              "email-1@example.com",
              "email-2@example.com"
            ],
            "maxItems": 5
          }
        },
        "additionalProperties": false
      },
      "EmailCampaignSetRecipientsModel": {
        "type": "object",
        "properties": {
          "sendToAllContacts": {
            "type": "boolean",
            "nullable": true,
            "description": "Set this to true to send the email campaign to all eligible contacts in the account. You can either include this node or the listIds node, but not both.\n",
            "default": false
          },
          "listIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "nullable": true
            },
            "description": "The list of mailing list ids and/or dynamic segment ids that you want to send the email campaign to.  You can either include this node or the sendToAllContacts node, but not both.\n",
            "example": [
              12345,
              23456
            ]
          },
          "exclusionListIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            },
            "description": "The list of mailing list ids and/or dynamic segment ids that you want to use as exclusion lists for the email campaign.  Any contacts included in the lists you specify here and that are also included in the recipient lists you specify in the  listIds parameter will not be sent a copy of the email campaign.\n",
            "example": [
              75674,
              89844
            ]
          },
          "suppressionListIds": {
            "type": "array",
            "nullable": true,
            "items": {
              "type": "integer"
            },
            "description": "The list of suppression list ids that you want to use as exclusion lists for the email campaign. Contacts in suppression lists will not be sent a copy of the email campaign.\n",
            "example": [
              31314,
              63463
            ]
          }
        }
      },
      "CategoryModel": {
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "format": "int32",
            "description": "The category's id."
          },
          "name": {
            "type": "string",
            "nullable": true,
            "description": "The category's name."
          },
          "type": {
            "type": "string",
            "nullable": true,
            "description": "The category type."
          },
          "parentCategoryId": {
            "type": "integer",
            "nullable": true,
            "description": "The id of the category's parent category. Will return NULL if the category is a root category."
          }
        },
        "additionalProperties": false
      },
      "GetCategoryResult": {
        "type": "object",
        "properties": {
          "pageSize": {
            "type": "integer",
            "format": "int32",
            "description": "The number of categories user requested to return per page."
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32",
            "description": "The current page number for which the data is being returned"
          },
          "totalRecords": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of categories that will be downloaded"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "description": "The total number of pages it will take to download information about all the categories based on the page_size given by user"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryModel"
            },
            "description": "Array of category objects, where each object returns information about one category"
          }
        },
        "additionalProperties": false,
        "example": {
          "pageSize": 2,
          "pageNumber": 1,
          "totalRecords": 7,
          "totalPages": 4,
          "categories": [
            {
              "categoryId": 123456,
              "name": "Summer activities",
              "type": "Email Campaign",
              "parentCategoryId": 12345
            },
            {
              "categoryId": 425666,
              "name": "LIST CATEGORY 1",
              "type": "Mailing List",
              "parentCategoryId": null
            }
          ]
        }
      },
      "MmsTextContent": {
        "type": "object",
        "properties": {
          "textMessage": {
            "type": "string",
            "description": "Text message of the MMS message that user wishes to send.",
            "example": "Hello, this is my MMS message.",
            "maximum": 1600
          }
        }
      },
      "MmsMediaContent": {
        "type": "object",
        "properties": {
          "mediaName": {
            "type": "string",
            "description": "Name of the media file.",
            "example": "Company Logo",
            "maximum": 255
          },
          "mediaType": {
            "type": "string",
            "description": "Type of the media file that user wishes to include in the MMS message.",
            "example": "image/jpeg",
            "oneOf": [
              {
                "type": "string",
                "title": "image/gif"
              },
              {
                "type": "string",
                "title": "image/jpeg"
              },
              {
                "type": "string",
                "title": "image/png"
              },
              {
                "type": "string",
                "title": "text/plain"
              },
              {
                "type": "string",
                "title": "text/vcard"
              },
              {
                "type": "string",
                "title": "video/3gpp"
              },
              {
                "type": "string",
                "title": "video/mp4"
              }
            ]
          },
          "mediaURL": {
            "type": "string",
            "description": "URL for the media file. The URL should be publicly accessible.",
            "example": "https://mycompany/media/companylogo.jpeg",
            "maximum": 2048
          }
        },
        "additionalProperties": false
      },
      "MmsMessageContent": {
        "type": "object",
        "properties": {
          "textContent": {
            "$ref": "#/components/schemas/MmsTextContent"
          },
          "mediaContents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MmsMediaContent"
            },
            "description": "Advises the media part of the MMS message.",
            "maxItems": 10
          }
        },
        "additionalProperties": false,
        "required": [
          "mediaContents"
        ],
        "description": "Class for MMS messageContent"
      },
      "SingleMmsMessageRequest": {
        "required": [
          "messageContent",
          "mobilePhone"
        ],
        "type": "object",
        "properties": {
          "mobilePhone": {
            "type": "string",
            "description": "Mobile phone number to send",
            "example": "19998887770",
            "maximum": 15
          },
          "messageContent": {
            "$ref": "#/components/schemas/MmsMessageContent"
          },
          "shortenURLs": {
            "type": "boolean",
            "description": "Whether to shorten the urls in message content or not",
            "example": true,
            "default": false
          },
          "customHeaders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CustomHeader"
            },
            "description": "List of custom headers",
            "maxItems": 5
          },
          "includeUnsubscribeMessage": {
            "type": "boolean",
            "description": "Whether to include unsubscribe message at the end of the content",
            "example": true,
            "default": true
          },
          "includeBrandedMessageHeader": {
            "type": "boolean",
            "description": "Whether to include branded message header at the beginning of the content. If the node is not present, then value set in account settings will be used to determine whether to include branded message header at the beginning of the content.",
            "example": true
          }
        },
        "additionalProperties": false,
        "description": "Class for SingleMms message request"
      },
      "SingleMMSMessageSendResponse": {
        "type": "object",
        "properties": {
          "mobilePhone": {
            "type": "string",
            "description": "Gets or sets the MobilePhone.",
            "example": "19998887770"
          },
          "mmsmessageId": {
            "type": "string",
            "description": "Gets or sets the MMSMessageId (GUID).",
            "example": "cf9e5a91-b445-4acc-8a19-479d6812e6b8"
          }
        },
        "additionalProperties": false,
        "description": "Response model for SingleSms Message send."
      }
    },
    "parameters": {
      "XAccountId": {
        "name": "X-Account-Id",
        "in": "header",
        "description": "Optional header that can be added if request is to be sent on behalf of an account id that is not the account id of the integration key.",
        "schema": {
          "type": "string"
        }
      }
    }
  }
}